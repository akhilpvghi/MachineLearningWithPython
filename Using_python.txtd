https://olympus.greatlearning.in/courses/10899/pages/basic-installation-of-python?module_item_id=444805
AKHILPVGHI@GMAIL.COM	
saregamapa@123



python is primarily lang...

numpy---array operation--->

pandas---->

 Faculty: Gurumoorthy Pattabiraman


python---comparitively slow---->OOP's---->simple and easy to learn-->

--->modules and packages--->


latest---->3.6.5---->anaconda python 3.5---->to install all package--->
Anaconda prompt---->jupyter notebook---->markdown---is like html--->can have html template....>

markdown never exectes---->shift+tab---->desc of fn-->

tab---->gives suggestion--->

Numpy----->multiDimesional array

----->install packages---->conda install -c plotly plotly
_________________________________________________________________________________
---->data struture in python----->

list--->sequence of data values-->myList[3] | myList[1:3]) | ---->can store anything--->from right its---> -1,-2....index---->

simply myList will print its type---->

mylist{1:3}--->will print index 1and 2 element only........

________________________________________________________

Operators used in list

+ -------->will increse size of list-----1st list then 2nd list

d= a+b+c;

will result d---->

functions on list


len(MyList)---->total elements	


del(myList[3]) | del myList[-2:]   //this is this way only
using index only.....


to remove item with value....
newList.remove(2)   //here 2 as value

removes only first match....not all values...


POP

list.pop(index)


IN
4 in Mylist ----->True or false

NOT IN
'banglore' not in myList------->True or false

MAX and MIN
max(MyList) or min(MyList)------->won't work for strings


MANIPULATE

li.append(5)---------->at end---->only one item can be appended

list.extend([4,5,6])----->more than one item can be appended

li.insert(index, element)------------->shifting in list take place

li.sort()---->original list gets changed

sorted(l2)------->will not change its original list-->only for print


REASSIGINING

LIST[2]=23;


----------------------
tuples are immutable means can't be manipulated
myTuple(1,2,"akhil")

_________________________________________

Dictionary
dic={"key":value, ...}

key-value pair

print(dic)
print(dic[key])

------------>cannot have more value at same key--->last one will bw replaced...

________________________________________________________

sets=------->combination of list and dictionary ----->can't have duplicate value--->{'a','b', ....}


____________________________

Conditional Statements

if,else, elif

boolean decision....

if (a>10) :
	print(a, is greater than 10)

else :

______________________________________

logical operator

and, or



id(age > 35 and qual="PG")
_________________________________________

LOOPS

--->for and while loop

for name in ["akhi",2,3,4]
	print(name)


while(count<10)
	print(count)
	count=count+1


e.g. for x in range(5,10):
	
__________________________________________

functions

def fn_name():
	print("some fn")


_______________________________________________________

Lmabda functions or inline fn--->

add = lambda x,y :x+y
add(1,3)

//4


Other fn---->

FILTER

final_list = list(filter( function which will return true/false, list))

______________________________

MAP

final_list=list(map(fn change something on every value,list_a,list_b))

_____________________________________

libraries ----->have set of predefined functions

functools---->a library

import functools as f
import operator as o

reduce fn in functoools

sum=f.reduce(o.add,li)---->will operate all list at once ,

_______________________________________

ACCUMULATORS

itertools library 

import itertools as i

list(i.accumulate(list, fn))----->will give list again with having every staet as index

[1,3,4,10,4]====>[1,3,12,120,480]===>cummuluatative multiplication

________________________________________________________________________


Numpy--->library--->n dimensional matrix or vector--->

conda install numpy

import numpy as np

vector are one-d

creating numPy arrays---->

simple_list=[1,2,3]

shift+enter--->to run

np.array(simple_list);

list_of_lists = [[1,2,3],[4,5,6]]

np.arange(0,10)--->[0,1,2....9]

np.arange(0,21,5)--->[0,5,10,15,20]

np.zeros(100)====>[0,0,0,0...99 times]

np.ones(4,5)====1 matrix of 4*5

np.linspace(0,20,10)====>0 to 20 with equal distance of 10 values

np.eye(5)===>identity matrix of 5*5

np.random.rand(3,2)===>3*2 random matrix--->uniform 

np.random.randn(2,3)===>3*2 random matrix

np.random.randint(5,20)===>b/w these no....5 inclusive 20 exlusive

np.random.randint(5,20,10)---->total 10 values

np.arange(30).reshape(5,6)===>must 5*6 = 30

array.argmin()===>position of min in array

array.dtype===>find data type

arr.T====>transpose of matrix

__________________________________________________

samp_array=np.arange(10,21)

ap.array[2:5]===>[2,3,4]

sp_arr[1:2]=100===>broadcasting 1st position as 100

subset=spmp_arr[0:7]

smp_arr[;]=1001==>change/broadcast all to 1001

copy_smp_arr= samp_arr.copy()

otherwise it will change the original array

_________________________________________________________

data frame V/s matrix

smp_matrix= np.array(([50,20,1,23],[78,9,3,24]))

smp_matrix[0][3]====>1st row, 4th column

OR

smp_matrix[0,3]

_______________________________________________

smp_matrix[3,:]===>4th row and all columns

OR

smp_matrix[3]===>same as above

_______________________________________________

smp_matrix[:,(1,3)]===>all rows and 2nd and 4th column

--->columns can be swapped

________________________________________

np.sqrt();
np.cos();
np.log(np.exp(5.2))
mat=np.array([2,5,7],[2,5,7],[2,1,6])


np.arange(0,15);
np.arange(3,21,6)===>3rd parameter is step size
ar=np.linspace(0,5,10)===>both are inclusive, 3rd is mandatory, will divide into 10 equal parts from 0 to 5

ar.reshape(5,2)====>5 rows , 2cols===>equal to no of mul(row * col)

reshape is immutable--->

____________________________________________________________

rand_vec = np.random.randn(15)===>15*1

print(rand_vec>0)
print(rand_vec>0)===>array of booleans
print(rand_vec[rand_vec>0])==>values only greater than 0

________________________________________________________________

Panda is another package.....

panda is datatype like excel.....

import panda as pd;

series===>indiviual column... 

and 

dataframe====>row and column====>more flexible than numpy

naming row according to ourselves

=====>like sql==>merging,sorting,join
____________________________________________________________




accessing and modifying dataframes--->

df3['second column']---->will give series

dataframe is list of list--->

df3[['second_col','third_col']]--->will give third col

df3.loc['fourth_row']===>if we need row use loc fn

df3.iloc[2]===>certain row

df3.loc[['rows'],['cols']]

df3>0===>will turn datafram of data into dataframe  boolean
















https://codelabs.developers.google.com/codelabs/cloud-speech-intro/index.html#2


https://console.cloud.google.com/iam-admin/serviceaccounts?folder=&organizationId=&project=edupurpose

https://console.cloud.google.com/apis/library/speech.googleapis.com?q=spech&id=7ae3f475-64e7-4123-880a-a889f34fa714&project=edupurpose&folder&organizationId





indo_dispather

aplles@123



