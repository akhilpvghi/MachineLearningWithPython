DOcker and jenkins Integration

________________________________________________________________________________________________________________________________

S1E1

by Viktor Farcic

	==>prerequisite

		==>Docker

		==>Docker machine

		
		==>git


		===>jq



===>why docker...?

	==>Portable

	==>low on resources usage

	==>pretty scalable

	==>Isolation of processes

	==>self-sufficient

	==>docker containers are immutable ==>same behaviour anywhere, any environment



________________________________________________________________________________________________________________________________

S1E2

Docker hub

	$ docker container run --rm mongo (--rm is for to remove container as long as image stops)

	==>ctrl + c will stop it

	==>docker container ls -a (ls all container)

	==>now we are gonna run it in touch mode (that is background)

		===>docker container run -d --name mongo mongo (will return id of created instance)

	==>docker container ls

	==>but container is not exposing any port

	$ docker container logs mongo (mongo is name of container)

	$ docker container stop mongo

	$ docker container ls -a (it is there but stopper)

	docker container rm mongo (mongo is name of container)

	$ docker container ls -a

	$ docker container run -d --name mongo -p 8081:27017 mongo (-p is publish ==>expose 8081 and map to 27017)

	==>hardcoring port is not good idea

	$ doncker container rm -f mongo (-f forcefully will automatically stop first then remove)

	now we will let docker decide the port

	$ docker container run -d --name mongo -p 27017 mongo (this time docker will decide)

	$ docker container ls

	$ docker container rm -f mongo

	database is stateful


	$ docker container run -d --name mongi -p 27017 -v /tmp/mongo:/data/db mongo (-v is volume, where do you want to persist, now it is mounted to that directory)

		==>now it is stored in local directory

	$ doker container inspect mongo

	$ ls -l /tmp/mongo/
	
	$ docker container -rm -f mongo



________________________________________________________________________________________________________________________________

S1E3

how to operate containers

	==>in YAML format

	==>execute YAML file using Docker ...

	$ docker-compose --help

	$ docker-compose up --help

	$ git clone repo_url

	$ cd repo

	$ cat docker-compose.yml

	$ docker-compose up -d

		==>will be running in network

	$ docker-compose ps (ps is name of service)

		==>without exposing port every service can be used in the defined network

	$ docker container inspect godemo_app_1 | jq '.' (jq is tool to look in json)
		
			==>get port of container 

			==>network settings ==>look at port

	$ PORT=$(docker container inspect godemo_app_1 | jq -r '.[0].NetworkSettings.Ports."8080/tcp"[0].HostPort')

	$echo $PORT

	$ curl localhost:$PORT/demo/hello

	$ docker-compose ps

	$ docker-compse down (stop all the service in that project)

docs.docker.com/compose/compose-file/



________________________________________________________________________________________________________________________________

S1E4

Manage docker Images

	==>where and how to store them

	==>benefits of building images

	==>allows third party services easily

	==>store everything in images


________________________________________________________________________________________________________________________________

S1E5

	==>push images
	
	==>single command that builds docker file to docker image

	$ cat Dockerfile

build images


________________________________________________________________________________________________________________________________

S1E6

running docker service

	==>push,pull etc


	==>docker registry
		
$ docker image go-demo user_name/go-demo  (user_name after registering)

$ docker login

	user_name and password


$ docker image push vfarcic/go-demo

$ docker image pull vfaarcic/go-demo

$ docker container run -d --name registry -p 5000:5000 registry

$ docker container ls

$ docker image tag go-demo localhost:5000/go-demo

$ docker image push localhost:5000/go-demo

$ docker image rm localhost:5000/go-demo

$ docker image tag go-demo localhost:5000/go-demo:1.1 (1.1 is release number)

$ docker container rm -f registry

	container cluster operations

		==>schedulers

		==> Scaling

		==> Fault tolerance

		==> Service and discovery and networking



________________________________________________________________________________________________________________________________

S2E1

	by Allan Espinosa

	course overview

		==> multiple environment

		==> advanced jenkins

		==> production mode

		==>CentOs 7 and docker 17


________________________________________________________________________________________________________________________________

S2E2


we will setup two docker environement
	
	==>prepare dev environment in docker
	
		==>set up docker container
				
				==>application source in docjker hub

		
			cat > Dockerfile

			$ docker build -t dockerhp/git .

			mkdir !/source

			$ cd source

			$ docker run -v ~/source:/source dockerhp/git git clone https://github...... -b volume1/video-1.1 /source

					bind mount concept

			$ docker pull node:8

			$ docker run -v $(pwd):source -it node:8 bash

			

	==>final deploy

			
________________________________________________________________________________________________________________________________

S2E3

















________________________________________________________________________________________________________________________________
________________________________________________________________________________________________________________________________

AWS S3

_______________________________________________________________________________________________________________________
S4E21


Managing S3 buckets

	==>globomantics

	==>tagging

	==> Analyse S3 logs

	==> AWS cloud watch ==>can be for alarm



_______________________________________________________________________________________________________________________
S4E22

globomantics 
	==>categorise

	==>log S3

	==>monitor bucket matrix

	==>COntrol S3 


TAGGING
	
	==>object tagging allows categorizing

	==>tags not limited to S3

rules for tags

	==>can assign upto tags

	==> key value fair

	==>keys and values are case sensitive

_______________________________________________________________________________________________________________________
S4E23

AWS console

	services 
		==>S3

			==>nucket ==>properties

				==>tags
					==>add tags
						==>name and value

				object dont inherit tags from bucket
						==>hence add new tags for buckets

>>> aws s3 ls

	==>get bucket list

>>>aws s3api get-object-tagging --bucket _bucket_name  --key _name_of_object (may be file (object name))

>>>aws s3api put-object-tagging --bucket _bucket_name  --key _name_of_object --tagging file://tagging.json (structure for s3 tag to change can get from net)

_______________________________________________________________________________________________________________________
S4E24

AWS cloudTrail
	
	==> action recorded 

	==> who or what

	==> enabled by default




_______________________________________________________________________________________________________________________
S4E25





















	



















todo ==>checkout as it is==>in git scm


	==>what is persistent cache


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Virtualisation

By Rick Criscie


microsoft hyper vlab

	==>physical server

	==>comes with adapter

	==>Host ==>no OS ==>its hypervisor (ESXi)
	
					==>acts as intermediary
				
					==>utilising CPU of host

					==>hypervisor manages VM

________________________________________________________________________________________________________________

E2

types of hypervisor

	==>TYPE -1 (you will see in datacentre)
		
		==>generally known as bare metal hypervisor

		==>VMware, Microsoft HyperV, RedHAt

		==>you buy a physical server

		==>direct access to H/W

	==>TYPE-2

		==>do not have direct access to hardware

		==>e.g VMware player , VMware workstation (on top of another working system)

		==>VM ==>VM workstation (hypervisor) ==>another OS ==>then H/W




________________________________________________________________________________________________________________

E4

	===>virtual disk information

	==>live state (what hardware is being used)

	==>files of virtual machine will always be there like (snapshot img)


________________________________________________________________________________________________________________

E5


Food Group #CPU virtualisation

	==>VM access to CPU

	==>you have ability to use two core (not sure its always yours)

	==>share physical core

	==>CPU utilisation handling smoothly



________________________________________________________________________________________________________________

E6


Food Group #Memory virtualisation

	==>VM will have its guest physical memory which maps to physical host memory

	==>hypervisor efficiently shares memory

	===>concept of reservation memory is poosible but not a good idea


________________________________________________________________________________________________________________

E7


Windows on VM ==>will look for drivers==> has its virtual vNIC (not physical) ==>Physical switch which will have port group


		==>traffic can be sent from 1 VM to another

		==>virtual swich has its pNIC (Physical NIC (Network Interface card)) for uplink

		==>trick OS to give picture that it has pNIC


________________________________________________________________________________________________________________

E8

storage Virtualisation

	vSCSI (small computer system interface) ==>hypervisor (Layer of abstraction)==>storage adapter ==>data store

		==>different hypervisor can share same resources (data store)



________________________________________________________________________________________________________________

E9

	Gym Analogy

		==>you cant move to cloud without virtualisation

		==>consolidate workload

		==>we prevent resource wastage




________________________________________________________________________________________________________________

E10

Virtualisation benefi ==>MOBILITY

	==>mobility to different host/hypervisor

	==>so that maintenance can easily be done

	==> vmotion or live migration

________________________________________________________________________________________________________________

________________________________________________________________________________________________________________


S1E1


Virtualisation and cloud computing

by monjur Ahmed

	why..?

		==>latest computing approach

		==>massive shift to cloud computing worldwide

	why learn about virtualisation..?
		
		==>without virtualisation cloud computing is nothing

		==>to reduce IT infrastructure cost


________________________________________________________________________________________________________________


S1E2

course overview


________________________________________________________________________________________________________________


S2E1

	cloud computing ==using of remote resources

			==>on demand service 

			==>cloud computing is an approach


	dual booting is different from virtualisation

	virtualisation ==>type 1 hypervisor (bare metal)


	example of cloud computing ==>email
		
				===>any online storage

				==>High performance computing

				Cloud types
					public cloud
						==>owner is someone else
					private cloud
						==>owned by self organisation
					Commmunity cloud

					hubrid cloud

				Cloud service model
					IaaS : infrastructure as a service

					Paas : platform as a service

					SaaS : software as a service

					SecaaS : Security as a service

					DaaS : database as a service




________________________________________________________________________________________________________________


S2E2

type -2 hypervisor practical

________________________________________________________________________________________________________________


S2E3

	==>practical of VM virtual box



________________________________________________________________________________________________________________


S2E4

service models

________________________________________________________________________________________________________________


S3E1

intro to Computer networks

________________________________________________________________________________________________________________


S3E2


IP addressing

________________________________________________________________________________________________________________


S3E3

VPN

________________________________________________________________________________________________________________


S3E4







...incomp





________________________________________________________________________________________________________________

________________________________________________________________________________________________________________

S1E2


Jenkins

	==>automate server

	==>used for continous integration/continous delivery


________________________________________________________________________________________________________________


S1E5

	==>installing centOS


________________________________________________________________________________________________________________


S1E6

	$ ip a

	==>connected to centOS using putty
		
		==>in saved session of putty , you can save ip to login



________________________________________________________________________________________________________________


S1E7

	==>docker is availabe for some platforms only

	==>get download script from docker site for centOS

	==>sudo usermod -aG docker jenkins (add jenkins user to docker group)

		==>then relogin

		==>now check $ docker ps


________________________________________________________________________________________________________________


S1E8

	install docker compose

	==>google.com	==>install docker compose

		==>copy paste the command

	$sudo chmod +x /usr/local/bin/docker-compose



________________________________________________________________________________________________________________


S1E9


	docker uses image

	jenkins image server will be running soon

	==>gogSrch ==>jenkins docker image

	$ docker images

	$ sudoo du sh .... ==>to know how much space is consumed by app


________________________________________________________________________________________________________________


S1E10

 $mkdir jenkins

 mv jenkins/ jenkins-data (renaming)

 $ vi docker-compose.yml

	version: '3'
	services:
		jenkins:
			container_name: jenkins
			image: jenkins/jenkins
			ports: 
				- "8080:8080"
			volumes: 
				- "$PWD/jenkins_home:/var/jenkins_home"
			networks:
				- net
	networks:
		net:

________________________________________________________________________________________________________________


S1E11

	start jenkin server

	volume must have required permisssions
	
	$id

	$sudo chown 1000:1000 jenkins_home -R

	$docker-compose up -d

	$docker ps
		==>to see server running
	
	$ docker logs -f 

	$ docker logs -f jenkins

	hit_ip ==> ip:8080
		
		==>administartor password from logs

________________________________________________________________________________________________________________


S1E12


	==>create a local dns for jenkins

	==>open notepad as runadministrator

	==>go to system 32/etc ==>choose hosts file

		==>paste_ip_address jenkins.local
________________________________________________________________________________________________________________


S1E13

	ssh jenkins@jinkine.local

________________________________________________________________________________________________________________


S1E14

jenkiks-data
	==>docker-compose.yml
	==>jenkins-home

$ docker-compose stop
$ docker ps
$ docker-compose start
$ docker-compose restart jenkins
$ docker-compose down (will delete everything but not from volume)
$ docker-compose up -d (create the service)

________________________________________________________________________________________________________________


S2E2

	look at jenkins UI

	new Item 
		==>

	people
		==>like user details
		==>resrict permission n more
	
	build history
		==>test analysis
	
	manage jenkins
		==>

________________________________________________________________________________________________________________

S2E3

	==>create a job

	==>new item
		==> _my_first_job
		==> task is known as job
		
		==>go to build in UI
			==>add shell
				==>in shell 
					==>echo Hello world

		==>you can check it in console and build history in UI


		$ docker exec -ti jenkins bash

			==>we have java installed in container


________________________________________________________________________________________________________________

S2E4

	keep playing with our first job

	$ docker exec -ti jenkins bash

	$ echo "Current date is $(date)"

	$ whoami

		==>in UI of jenkins
		==>save

		==>build now

			==>builds history then console now

		==>console output
	

________________________________________________________________________________________________________________

S2E5

	==>redirect output

		$ NAME = AKHIL

		$ echo "Hello, $NAME .cureent date and time is $(date)"

			echo "hello $NAMME" > /tmp/info

			cat tmp/imfo

			==>file created on jenkins can be seen in CLI

			==>file is going to be saved in jenkins container

			==>file can also be shared with host, we will see it later


________________________________________________________________________________________________________________

S2E6

	==>execute bash script from jenkins

	==>container doesnt have vi

		create file outside of container

		$ vi bash_file.sh

		#!/bin/bash
		echo "hello, $NAME $LASTNAME"

		==>if we run , permission denied

		chmod +x ./bash_file.sh

		$ ./bash_file.sh 

		get parameter in sh file


		#!.........

		NMAE= $1
		LASTNAME=$2

		$ ./script akhil kumar

		$ docker cp file_to_be_copied:/tmp/fiel_name.sh

		$ docker exec -ti kenkins bash

			==>go to job

				==>configuration

				==>copy /tmp/file.sh akhil kumar

				==>save

				if we are using variable
					==>space should not be there






________________________________________________________________________________________________________________

S2E7

	==>add parameter to your job

		==>go to configure

			==>in general section

			==>this project is parameterized

			==>string parameter

			==>give name to string parameter

				_FIrst_name

				==>can add more parameter

				==>we can give default value


			==>now build_with_parameters


________________________________________________________________________________________________________________

S2E8

	==>choose parameter type of choice parameter


________________________________________________________________________________________________________________

S2E9

	==>Adding basic logic to our script

	if [ "$SHOW" = "true" ]; then
		echo "Hello, $NAME $LASTNAME"
	else
		echo "please mark first"
	fi

	$./file.sh AKhil kumar true


________________________________________________________________________________________________________________

S3E2

	==>to execute job remotely

	$ mkdir centos7

	$ cd centos7

	vi Dockerfile

	~from centos
	~
	~RUN yum -y install openssh-server
	~
	~RUN useradd remote_user && \
		echo "1234" | passswd remote_user --stdin && \
		mkdir /home/remote_user/.ssh && \
		chmod 700 /home/remote_user/.ssh
	
	

________________________________________________________________________________________________________________

S3E3

in centos7
	$ ssh-keygen remote-key
	
	vi Dockerfile

	~.....
	.
	.
	.
	COPY remote-key.pub /home/remote_user/.ssh/authorised_keys

	~RUN chown remote_user:remote_user -R /home/remote_user/.ssh/ && \
	~chmod 600 /home/remote_user/.ssh/authorised_keys

	~RUN /usr/sbin/sshd-keygen

	~CMD /usr/sbin/sshd -D

________________________________________________________________________________________________________________

S3E4

	along with jenkins user

	jenkins:
	.
	.
	.
	remote_host:
		container_name: remote-host
		image: remote-host
		build:  (as we are not having image yet)
			context: centos7 (where dockerfile will be searched)
		networks:
			- net
networks:
	net:

~docker-compose build
~docker images

we dont have any container tio that image

~docker-compose up -d

~docker exec -it jenkins bash
~ ssh remote_user@remote_host

//you can also cp the key in jenkin user and login to remote_host directly

________________________________________________________________________________________________________________

S3E5

install plugins in jenkins

	==>manage jenkins

	=>manage plugins

	==>available

		==>SSH

			==>install withour restart

			==>mark restart now
________________________________________________________________________________________________________________

S3E6

 connections are only in container

	jenkins

	==>manage jenkins

		==>configure system

		==>ssh host

		hostname : remote_host
		port 22

________________________________________________________________________________________________________________

S3E7

new item

	==>build

	==>execute shell scripts on remote host using ssh

	now this file will be created at remote_host


________________________________________________________________________________________________________________

S4E1





..incomp

________________________________________________________________________________________________________________

S12E2

	Continous integration

	code ==> build ==> testing ==> deploy/promote to production ==>all goes to coding again


________________________________________________________________________________________________________________

S12E3

continous delivery

________________________________________________________________________________________________________________

S12E4

production




...incomp

________________________________________________________________________________________________________________

________________________________________________________________________________________________________________

E1

Computer Architecture

	4 main types of IC
		
		==>CPU or processor (dual core or core duo)

		==>GMCH (Graphics memory controller hub) IC
		
			==>aka north bridge

			==>RAM is connected to north bridge

			==>VGA is connected to northbridge

		==>ICH (input controller hub) 
			
			==>printer port

			==>USB port

			==>COM port 

			==>LAN port

			==>AUdio

			==>SATA

			==>IDE

			==>PCI slot

			==>FLoppy disk

			
				==>GMCH and ICH both combined known as chipset




		===>Super IO IC

			==>mouse

			==>keyboard

			==>CPU FAN

			==>BIOS IC

		


________________________________________________________________________________________________________________

S1E2

	==>4 important IC in motherboard

	==>platform controller hub (PCH)

	==>now processor will have ==>ram and VGA/DIsplay

	==>advanced PCH handles north and south bridge

		===>BIOS IC is co to PCH IC

	==>IO Ic acts as power controller for motherboard



________________________________________________________________________________________________________________

S1E3

SMPS ==>switch mode power supply gives upto 60% power

	rest motherboard manages itself


________________________________________________________________________________________________________________

S1E4

	===>parallel BIOS IC is replaced by serial BIOS IC



________________________________________________________________________________________________________________

S2E1

System memory
	
	primary memory
			
			==>ROM
				==>non volatile

				==>PROM
				==>EPROM
				==>EEPROM
				==>PROM

			==>RAM
				==>volatile(supply neeeded)
	
				==>SRAM (static RAM)
					==>speed more than DRAM
					==>CACHE
				
				==>DRAM
					==>SDRAM (synchronous DRAM)
						==>DDR1 (Double Data rate 1) ==>in one cycle , double data bit
						==>DDR2
						==>DDR3
						==>DDR3L (DDR3 with low voltage)
						==>DDR4
					
					pins are increased as DDRversion increased


	secondary memory
			==>permanent memory
			==>non volatile memory
			==>HDD
			==>SSD (solid state drive)
			==>CD/DVD
			==>Pendrive 
			==>Floppy






________________________________________________________________________________________________________________

S3E1

SMPS wires speicfication

________________________________________________________________________________________________________________

S4E1

	==>incomp

================================================================================================

______________________________________________________________________________________________________________________
S1E1-E7 (CCSK\[ DevCourseWeb.com ] Lynda)

CCSK certificate course

	VPC peering


	===>VPC > Subnet > instance

	==>new peeing

	==>new internet gateway

	==>new route table



______________________________________________________________________________________________________________________
S1E8

Network security

ACL (Access control list)

	==>by VNIC

	==>Virtual network sucnets
	==>use of security groups

	

______________________________________________________________________________________________________________________
S1E9

	VPC
		
		==>network ACL

			==>create new N/w ACL

			==>Associate VPC

			==>add inbound rules

			==>rule no is like priority here

				==>inorder to activate it aaosiate with subnet

			

______________________________________________________________________________________________________________________
S1E10

	VPN 
		==>encrypted network tunnel

		==>client-to-site VPN

		==>Site- to-site VPN


______________________________________________________________________________________________________________________
S1E11

client to site vpn 

	==>mutual authentication reqires PKI certificate

		go to VPC

			==>client VPN end point

				==>give name

				==>client IPv4 addresss


______________________________________________________________________________________________________________________
S1E12

	==>incomp

==========================================================================================================================================================

 ([Coursezone.net] Complete Linux Bash Shell Scripting Thru Real Life Examples)

by Imran Afzal
____________________________________________________________________________________________________________________________________________

S1E1

course syllabus overview

	==>Lab setup

		==>what is virtual machine

		==>linux installation

	section 2
		==>shell scripting

		==>interaction with kernel

		==>different shell

		==>starting a shell

	section 3(scripting standards)
		
		==>proper naming convention

		==> permissions

		==>shell script format

	setion 4
		==>basic shell scripts

	section 5

		==> Real life scripts


____________________________________________________________________________________________________________________________________________

S1E2

	==>to automate your task


____________________________________________________________________________________________________________________________________________

S2E1	

	lab setup
		
		what is virtual environment or machine..?

		==>what is Oracle virtual box ..?

		==>installing virtual box

		==>creating first virtual box  ...?

		==>linux installation

		==>CentOS


____________________________________________________________________________________________________________________________________________

S2E2

what is oracle virtual box..?

	==>centOS linux operating system

	==>it is open-source hypervisor for x86 computers

	hardware ==>OS ==>Oracle virtual Box ==> (linux , windows , mac)


____________________________________________________________________________________________________________________________________________

S2E3

	==>google type ==>oracle virtual box download

	==>go to download

	==>windows hst

	==>save the file

	==>leave everything default

	(109 mb exe it is)


____________________________________________________________________________________________________________________________________________

S2E4

	==>creating first virtual box

	==>like cntainer

	==>click on new

		==>name

		==>linux 64

		==>size of memory (ram)


____________________________________________________________________________________________________________________________________________

S2E5

install linux

	===>will do later


____________________________________________________________________________________________________________________________________________

S3E1

	shell scripting basics

	==>what is kernel ..?

	==>what is shell  ...?

	==>what is shell scripting?

	==>types of shells

	==> starting a shell

	==>how to run a shell script



____________________________________________________________________________________________________________________________________________

S3E2

	linux kernel

		==>interfaces between hardware and shofware


		==>OS == kernel + shell


____________________________________________________________________________________________________________________________________________

S3E3

what is shell?

	==>like container ==>contains information

	==>echo $0 ==>to find your shell

	==> cat /etc/shells ==>list all shell

	==>cat /etc/passwd



____________________________________________________________________________________________________________________________________________

S3E4

what is shell scripting ...?


	put instruction in a shell and run it

	like blowing air in shell

	

____________________________________________________________________________________________________________________________________________

S3E5

Types of shells

	==>Gnome

	==>KDE

	==>sh   (it is original by stephen born)

	==>bash (born again shell)
		==>more enhanced features

	==>csh and tcsh

		==>tcsh (doesn't run bash script)

	==>ksh (by David Korn)

		===>compatible with shell and bash


____________________________________________________________________________________________________________________________________________

S3E6

	start a shell

	==>simply type shell name

	==>echo $0  ==>(to check shell)

	==> view contents of home

		==>it is in gnome environment

	if you want to channge shell just give name

	$sh
	echo $0

	to exit ==>$exit


____________________________________________________________________________________________________________________________________________

S3E7

how to run a shell script

	==>absolute path or relative path

	~ => /home/user/dir/file_name

	when you are inside directory you have to specify that you to run it from here

	==> ./script_name

	==>only if you are giving script name


____________________________________________________________________________________________________________________________________________

S4E1

welcome to scripting standards

____________________________________________________________________________________________________________________________________________

S4E2

Script Naming conventions

____________________________________________________________________________________________________________________________________________

S4E3

Script File permissions

	chmod a+x ==>giving excuutable permission to all users

____________________________________________________________________________________________________________________________________________

S4E4

Script format

	==>first is define a shell

		==> #!/bin/bash
	
		==> # comments

		==>define variables (e.g name = Akhil)

		==>commands (echo, cp, grep etc.)

		==>statements (if, while, for etc.)

		==>vim is updated of vi

		==>but vi supports everywhere

			#!/bin/bash
			# Pupose: Testing script format
			# Date: 14/04/2021
			# Modification: 14/04/2021
			a='My name is AKhil'
			
			echo $a

____________________________________________________________________________________________________________________________________________

S4E5

Sequence of script execution

	==>top to bottom

			
____________________________________________________________________________________________________________________________________________

S5E1

	Basic shell scripting


____________________________________________________________________________________________________________________________________________

S5E2

create basic script

	you will only delete if dir is created by user not root otherwise only root can delete it

	vi bashfile  ==>we add bash extension if we want
	#!bin/bash
	# Author: AKhil
	# Date Created: 14/04/2021
	# Description : 
	# Date Modified: 

	echo Hello World

	$ls -ltr
	$chmod a+x bash_file
	$ /home/akhil/scripts/bash_file ==>with absolute

	$./bash_file ==>//absolute path

		echo
		echo Hello world
		echo

			==>to give like \new line



____________________________________________________________________________________________________________________________________________

S5E3

					
	Basic task script
	
		==>pwd
		ls
		whoami
		date
		cal
		touch a b c ==>create three file in same directory

	==>write script

		==>$vi basic_task
			#!/bin/bash
			# Author: Akhil
			# Date: 
			# Description:
			# Date Modified:

			echo 
			echo This Script will run basic tasks
			echo
			pwd
			ls
			whoami
			date
			cal
			touch a b c

			:wq!

			ls -ltr ==>the order in which they are created


____________________________________________________________________________________________________________________________________________

S5E4

Basic administrator task

	top
	df -h ==>when was the system reboot
	free -m
	uptime
	iostat

	>>>vi admintask
		#!/bin/bash
		#Author:
		#Date:
		#Description
		#Date modified:

		echo
		echo This script will run basic administrator commands
		echo
		top		==>will keep your session open and run in real time
		echo
		df -h
		echo
		uptime
		echo
		iostat
		echo
		echo end of script

		>>$chmod a+x admintask
		
	
		hence now

		top | head -10 ==>now it will pipe/give only 10 lines



____________________________________________________________________________________________________________________________________________

S5E5

	...incomp

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Udemy - Bash Scripting for Beginners Learn to Script!

____________________________________________________________________________________________
S0E1

	==>introduction

	==>traffic monitoring


____________________________________________________________________________________________
S1E1

	utilities iused in this couse

	echo
		==>$echo hello world

	grep
		==>used to search for sring in file

		$ grep echo file_name

			==>searched for echo string in file

		$ grep echo

			==>will be searching string echo whatever you will be entering

		$ awk '{print $1,$3}' filename ==>will print first and third string in file

		$man cat ==>to get help

____________________________________________________________________________________________
S1E2

	script structure

	#!/bin/bash
	
	#this simple script echoes some text
	
	echo this is the first siimple text

	function second_simple_text()
	{
		echo this is second function
	}

	second_simple_text

	// function needed to be called after defining

____________________________________________________________________________________________
S1E3


	..incomp
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
























































