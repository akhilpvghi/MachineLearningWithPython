DOcker and jenkins Integration

________________________________________________________________________________________________________________________________

S1E1

by Viktor Farcic

	==>prerequisite

		==>Docker

		==>Docker machine

		
		==>git


		===>jq



===>why docker...?

	==>Portable

	==>low on resources usage

	==>pretty scalable

	==>Isolation of processes

	==>self-sufficient

	==>docker containers are immutable ==>same behaviour anywhere, any environment



________________________________________________________________________________________________________________________________

S1E2

Docker hub

	$ docker container run --rm mongo (--rm is for to remove container as long as image stops)

	==>ctrl + c will stop it

	==>docker container ls -a (ls all container)

	==>now we are gonna run it in touch mode (that is background)

		===>docker container run -d --name mongo mongo (will return id of created instance)

	==>docker container ls

	==>but container is not exposing any port

	$ docker container logs mongo (mongo is name of container)

	$ docker container stop mongo

	$ docker container ls -a (it is there but stopper)

	docker container rm mongo (mongo is name of container)

	$ docker container ls -a

	$ docker container run -d --name mongo -p 8081:27017 mongo (-p is publish ==>expose 8081 and map to 27017)

	==>hardcoring port is not good idea

	$ doncker container rm -f mongo (-f forcefully will automatically stop first then remove)

	now we will let docker decide the port

	$ docker container run -d --name mongo -p 27017 mongo (this time docker will decide)

	$ docker container ls

	$ docker container rm -f mongo

	database is stateful


	$ docker container run -d --name mongi -p 27017 -v /tmp/mongo:/data/db mongo (-v is volume, where do you want to persist, now it is mounted to that directory)

		==>now it is stored in local directory

	$ doker container inspect mongo

	$ ls -l /tmp/mongo/
	
	$ docker container -rm -f mongo



________________________________________________________________________________________________________________________________

S1E3

how to operate containers

	==>in YAML format

	==>execute YAML file using Docker ...

	$ docker-compose --help

	$ docker-compose up --help

	$ git clone repo_url

	$ cd repo

	$ cat docker-compose.yml

	$ docker-compose up -d

		==>will be running in network

	$ docker-compose ps (ps is name of service)

		==>without exposing port every service can be used in the defined network

	$ docker container inspect godemo_app_1 | jq '.' (jq is tool to look in json)
		
			==>get port of container 

			==>network settings ==>look at port

	$ PORT=$(docker container inspect godemo_app_1 | jq -r '.[0].NetworkSettings.Ports."8080/tcp"[0].HostPort')

	$echo $PORT

	$ curl localhost:$PORT/demo/hello

	$ docker-compose ps

	$ docker-compse down (stop all the service in that project)

docs.docker.com/compose/compose-file/



________________________________________________________________________________________________________________________________

S1E4

Manage docker Images

	==>where and how to store them

	==>benefits of building images

	==>allows third party services easily

	==>store everything in images


________________________________________________________________________________________________________________________________

S1E5

	==>push images
	
	==>single command that builds docker file to docker image

	$ cat Dockerfile

build images


________________________________________________________________________________________________________________________________

S1E6

running docker service

	==>push,pull etc


	==>docker registry
		
$ docker image go-demo user_name/go-demo  (user_name after registering)

$ docker login

	user_name and password


$ docker image push vfarcic/go-demo

$ docker image pull vfaarcic/go-demo

$ docker container run -d --name registry -p 5000:5000 registry

$ docker container ls

$ docker image tag go-demo localhost:5000/go-demo

$ docker image push localhost:5000/go-demo

$ docker image rm localhost:5000/go-demo

$ docker image tag go-demo localhost:5000/go-demo:1.1 (1.1 is release number)

$ docker container rm -f registry

	container cluster operations

		==>schedulers

		==> Scaling

		==> Fault tolerance

		==> Service and discovery and networking



________________________________________________________________________________________________________________________________

S2E1

	by Allan Espinosa

	course overview

		==> multiple environment

		==> advanced jenkins

		==> production mode

		==>CentOs 7 and docker 17


________________________________________________________________________________________________________________________________

S2E2


we will setup two docker environement
	
	==>prepare dev environment in docker
	
		==>set up docker container
				
				==>application source in docjker hub

		
			cat > Dockerfile

			$ docker build -t dockerhp/git .

			mkdir !/source

			$ cd source

			$ docker run -v ~/source:/source dockerhp/git git clone https://github...... -b volume1/video-1.1 /source

					bind mount concept

			$ docker pull node:8

			$ docker run -v $(pwd):source -it node:8 bash

			

	==>final deploy

			
________________________________________________________________________________________________________________________________

S2E3

















________________________________________________________________________________________________________________________________
________________________________________________________________________________________________________________________________

AWS S3

_______________________________________________________________________________________________________________________
S4E21


Managing S3 buckets

	==>globomantics

	==>tagging

	==> Analyse S3 logs

	==> AWS cloud watch ==>can be for alarm



_______________________________________________________________________________________________________________________
S4E22

globomantics 
	==>categorise

	==>log S3

	==>monitor bucket matrix

	==>COntrol S3 


TAGGING
	
	==>object tagging allows categorizing

	==>tags not limited to S3

rules for tags

	==>can assign upto tags

	==> key value fair

	==>keys and values are case sensitive

_______________________________________________________________________________________________________________________
S4E23

AWS console

	services 
		==>S3

			==>nucket ==>properties

				==>tags
					==>add tags
						==>name and value

				object dont inherit tags from bucket
						==>hence add new tags for buckets

>>> aws s3 ls

	==>get bucket list

>>>aws s3api get-object-tagging --bucket _bucket_name  --key _name_of_object (may be file (object name))

>>>aws s3api put-object-tagging --bucket _bucket_name  --key _name_of_object --tagging file://tagging.json (structure for s3 tag to change can get from net)

_______________________________________________________________________________________________________________________
S4E24

AWS cloudTrail
	
	==> action recorded 

	==> who or what

	==> enabled by default




_______________________________________________________________________________________________________________________
S4E25





















	



















todo ==>checkout as it is==>in git scm


	==>what is persistent cache


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Virtualisation

By Rick Criscie


microsoft hyper vlab

	==>physical server

	==>comes with adapter

	==>Host ==>no OS ==>its hypervisor (ESXi)
	
					==>acts as intermediary
				
					==>utilising CPU of host

					==>hypervisor manages VM

________________________________________________________________________________________________________________

E2

types of hypervisor

	==>TYPE -1 (you will see in datacentre)
		
		==>generally known as bare metal hypervisor

		==>VMware, Microsoft HyperV, RedHAt

		==>you buy a physical server

		==>direct access to H/W

	==>TYPE-2

		==>do not have direct access to hardware

		==>e.g VMware player , VMware workstation (on top of another working system)

		==>VM ==>VM workstation (hypervisor) ==>another OS ==>then H/W




________________________________________________________________________________________________________________

E4

	===>virtual disk information

	==>live state (what hardware is being used)

	==>files of virtual machine will always be there like (snapshot img)


________________________________________________________________________________________________________________

E5


Food Group #CPU virtualisation

	==>VM access to CPU

	==>you have ability to use two core (not sure its always yours)

	==>share physical core

	==>CPU utilisation handling smoothly



________________________________________________________________________________________________________________

E6


Food Group #Memory virtualisation

	==>VM will have its guest physical memory which maps to physical host memory

	==>hypervisor efficiently shares memory

	===>concept of reservation memory is poosible but not a good idea


________________________________________________________________________________________________________________

E7


Windows on VM ==>will look for drivers==> has its virtual vNIC (not physical) ==>Physical switch which will have port group


		==>traffic can be sent from 1 VM to another

		==>virtual swich has its pNIC (Physical NIC (Network Interface card)) for uplink

		==>trick OS to give picture that it has pNIC


________________________________________________________________________________________________________________

E8

storage Virtualisation

	vSCSI (small computer system interface) ==>hypervisor (Layer of abstraction)==>storage adapter ==>data store

		==>different hypervisor can share same resources (data store)



________________________________________________________________________________________________________________

E9

	Gym Analogy

		==>you cant move to cloud without virtualisation

		==>consolidate workload

		==>we prevent resource wastage




________________________________________________________________________________________________________________

E10

Virtualisation benefi ==>MOBILITY

	==>mobility to different host/hypervisor

	==>so that maintenance can easily be done

	==> vmotion or live migration

________________________________________________________________________________________________________________

________________________________________________________________________________________________________________


S1E1


Virtualisation and cloud computing

by monjur Ahmed

	why..?

		==>latest computing approach

		==>massive shift to cloud computing worldwide

	why learn about virtualisation..?
		
		==>without virtualisation cloud computing is nothing

		==>to reduce IT infrastructure cost


________________________________________________________________________________________________________________


S1E2

course overview


________________________________________________________________________________________________________________


S2E1

	cloud computing ==using of remote resources

			==>on demand service 

			==>cloud computing is an approach


	dual booting is different from virtualisation

	virtualisation ==>type 1 hypervisor (bare metal)


	example of cloud computing ==>email
		
				===>any online storage

				==>High performance computing

				Cloud types
					public cloud
						==>owner is someone else
					private cloud
						==>owned by self organisation
					Commmunity cloud

					hubrid cloud

				Cloud service model
					IaaS : infrastructure as a service

					Paas : platform as a service

					SaaS : software as a service

					SecaaS : Security as a service

					DaaS : database as a service




________________________________________________________________________________________________________________


S2E2

type -2 hypervisor practical

________________________________________________________________________________________________________________


S2E3

	==>practical of VM virtual box



________________________________________________________________________________________________________________


S2E4

service models

________________________________________________________________________________________________________________


S3E1

intro to Computer networks

________________________________________________________________________________________________________________


S3E2


IP addressing

________________________________________________________________________________________________________________


S3E3

VPN

________________________________________________________________________________________________________________


S3E4







...incomp





________________________________________________________________________________________________________________

________________________________________________________________________________________________________________

Jenkins, From Zero To Hero Become a DevOps Jenkins Master

S1E2


Jenkins

	==>automate server

	==>used for continous integration/continous delivery


________________________________________________________________________________________________________________


S1E5

	==>installing centOS


________________________________________________________________________________________________________________


S1E6

	$ ip a

	==>connected to centOS using putty
		
		==>in saved session of putty , you can save ip to login



________________________________________________________________________________________________________________


S1E7

	==>docker is availabe for some platforms only

	==>get download script from docker site for centOS

	==>sudo usermod -aG docker jenkins (add jenkins user to docker group)

		==>then relogin

		==>now check $ docker ps


________________________________________________________________________________________________________________


S1E8

	install docker compose

	==>google.com	==>install docker compose

		==>copy paste the command

	$sudo chmod +x /usr/local/bin/docker-compose



________________________________________________________________________________________________________________


S1E9


	docker uses image

	jenkins image server will be running soon

	==>gogSrch ==>jenkins docker image

	$ docker images

	$ sudoo du sh .... ==>to know how much space is consumed by app


________________________________________________________________________________________________________________


S1E10

 $mkdir jenkins

 mv jenkins/ jenkins-data (renaming)

 $ vi docker-compose.yml

	version: '3'
	services:
		jenkins:
			container_name: jenkins
			image: jenkins/jenkins
			ports: 
				- "8080:8080"
			volumes: 
				- "$PWD/jenkins_home:/var/jenkins_home"
			networks:
				- net
	networks:
		net:

________________________________________________________________________________________________________________


S1E11

	start jenkin server

	volume must have required permisssions
	
	$id

	$sudo chown 1000:1000 jenkins_home -R

	$docker-compose up -d

	$docker ps
		==>to see server running
	
	$ docker logs -f 

	$ docker logs -f jenkins

	hit_ip ==> ip:8080
		
		==>administartor password from logs

________________________________________________________________________________________________________________


S1E12


	==>create a local dns for jenkins

	==>open notepad as runadministrator

	==>go to system 32/etc ==>choose hosts file

		==>paste_ip_address jenkins.local
________________________________________________________________________________________________________________


S1E13

	ssh jenkins@jinkine.local

________________________________________________________________________________________________________________


S1E14

jenkiks-data
	==>docker-compose.yml
	==>jenkins-home

$ docker-compose stop
$ docker ps
$ docker-compose start
$ docker-compose restart jenkins
$ docker-compose down (will delete everything but not from volume)
$ docker-compose up -d (create the service)

________________________________________________________________________________________________________________


S2E2

	look at jenkins UI

	new Item 
		==>

	people
		==>like user details
		==>resrict permission n more
	
	build history
		==>test analysis
	
	manage jenkins
		==>

________________________________________________________________________________________________________________

S2E3

	==>create a job

	==>new item
		==> _my_first_job
		==> task is known as job
		
		==>go to build in UI
			==>add shell
				==>in shell 
					==>echo Hello world

		==>you can check it in console and build history in UI


		$ docker exec -ti jenkins bash

			==>we have java installed in container


________________________________________________________________________________________________________________

S2E4

	keep playing with our first job

	$ docker exec -ti jenkins bash

	$ echo "Current date is $(date)"

	$ whoami

		==>in UI of jenkins
		==>save

		==>build now

			==>builds history then console now

		==>console output
	

________________________________________________________________________________________________________________

S2E5

	==>redirect output

		$ NAME = AKHIL

		$ echo "Hello, $NAME .cureent date and time is $(date)"

			echo "hello $NAMME" > /tmp/info

			cat tmp/imfo

			==>file created on jenkins can be seen in CLI

			==>file is going to be saved in jenkins container

			==>file can also be shared with host, we will see it later


________________________________________________________________________________________________________________

S2E6

	==>execute bash script from jenkins

	==>container doesnt have vi

		create file outside of container

		$ vi bash_file.sh

		#!/bin/bash
		echo "hello, $NAME $LASTNAME"

		==>if we run , permission denied

		chmod +x ./bash_file.sh

		$ ./bash_file.sh 

		get parameter in sh file


		#!.........

		NMAE= $1
		LASTNAME=$2

		$ ./script akhil kumar

		$ docker cp file_to_be_copied:/tmp/fiel_name.sh

		$ docker exec -ti kenkins bash

			==>go to job

				==>configuration

				==>copy /tmp/file.sh akhil kumar

				==>save

				if we are using variable
					==>space should not be there






________________________________________________________________________________________________________________

S2E7

	==>add parameter to your job

		==>go to configure

			==>in general section

			==>this project is parameterized

			==>string parameter

			==>give name to string parameter

				_FIrst_name

				==>can add more parameter

				==>we can give default value


			==>now build_with_parameters


________________________________________________________________________________________________________________

S2E8

	==>choose parameter type of choice parameter


________________________________________________________________________________________________________________

S2E9

	==>Adding basic logic to our script

	if [ "$SHOW" = "true" ]; then
		echo "Hello, $NAME $LASTNAME"
	else
		echo "please mark first"
	fi

	$./file.sh AKhil kumar true


________________________________________________________________________________________________________________

S3E2

	==>to execute job remotely

	$ mkdir centos7

	$ cd centos7

	vi Dockerfile

	~from centos
	~
	~RUN yum -y install openssh-server
	~
	~RUN useradd remote_user && \
		echo "1234" | passswd remote_user --stdin && \
		mkdir /home/remote_user/.ssh && \
		chmod 700 /home/remote_user/.ssh
	
	

________________________________________________________________________________________________________________

S3E3

in centos7
	$ ssh-keygen remote-key
	
	vi Dockerfile

	~.....
	.
	.
	.
	COPY remote-key.pub /home/remote_user/.ssh/authorised_keys

	~RUN chown remote_user:remote_user -R /home/remote_user/.ssh/ && \
	~chmod 600 /home/remote_user/.ssh/authorised_keys

	~RUN /usr/sbin/sshd-keygen

	~CMD /usr/sbin/sshd -D

________________________________________________________________________________________________________________

S3E4

	along with jenkins user

	jenkins:
	.
	.
	.
	remote_host:
		container_name: remote-host
		image: remote-host
		build:  (as we are not having image yet)
			context: centos7 (where dockerfile will be searched)
		networks:
			- net
networks:
	net:

~docker-compose build
~docker images

we dont have any container tio that image

~docker-compose up -d

~docker exec -it jenkins bash
~ ssh remote_user@remote_host

//you can also cp the key in jenkin user and login to remote_host directly

________________________________________________________________________________________________________________

S3E5

install plugins in jenkins

	==>manage jenkins

	=>manage plugins

	==>available

		==>SSH

			==>install withour restart

			==>mark restart now
________________________________________________________________________________________________________________

S3E6

 connections are only in container

	jenkins

	==>manage jenkins

		==>configure system

		==>ssh host

		hostname : remote_host
		port 22

________________________________________________________________________________________________________________

S3E7

new item

	==>build

	==>execute shell scripts on remote host using ssh

	now this file will be created at remote_host


________________________________________________________________________________________________________________

S4E2-E15  (4. Jenkins & AWS)

....Skipping


________________________________________________________________________________________________________________

S5E2

ANsible and jenkings

	Ansible ==>red hat ansible

		==>automate for everyone


________________________________________________________________________________________________________________

S5E3

install ansible

	and run in docker container

	==>google ==>install ansible pip linux

	latest release via pip

	==>sudo pip install ansiblw

	mkdir jenkins-ansible

	vi DockerFile

		FROM jenkins/jenkins   ==>//will tell which image to pick
		
		USER root  //===>which user will execute

		RUN curl -O ///// ==>copy this to get ansible
			python grt-pip.py && \  ....
			....
		USER Jenkins

	Docker compose file will contain information about container context
	vi docker-compose.yml
		==>in this file we will tell which image to use

	$ docker-compose build
	$docker ps
	$docker-compose up -d
		==>will run where docker-compose.yml file is present

________________________________________________________________________________________________________________

S5E4

make the ssh key permanently
	cd jenkins-data/
	cd centos7

	remote-key and remote-key.pub

	share file between container and host

	$docker exec -ti jenkins bash
	
	home folder can be seen in container only

	$exit ==>to go outside of container

	==>in taml file we can which folder maps with container in volume section

	mkdir jenkins_home/ansible

		==>now we can see in contaoiner also

	cp centos7/remote-key jenkins_home/ansibe/




	docker exec -ti jenkins bash ===>to check jenkin container //===>jenkins is user


________________________________________________________________________________________________________________

S5E5

	docker ps
		==>can see all container from cmd run from same docker-compose.yml level

	cretae an inventory ==>vi host

		[all:vars]

		ansible_connection = ssh


		[test] //==>defining groups
		test1 ansible_host=remote_host ansible_user=remote_user ansible_private_key=/var/jenkins_home/ansible/remote-key  //==>who belongs to this group, remote_host is dns , test1 we can also call alias, ansible_user is remote user 
		
	cp hosts ../jenkins_home/ansible/

	$ test connection

		ping remote_host

		ansible -i hosts -m ping test1 

________________________________________________________________________________________________________________

S5E6 - E22

	...skipping

________________________________________________________________________________________________________________


S6E1-E8   (6. Jenkins & Security)

	...skipping

________________________________________________________________________________________________________________

S7E1

	google ==>jenkins environment variables

		==>build_number
		build_id

		etc

	new item

		==>build ==>execute shell

		echo "BUILD ID is $BUILD_ID"


________________________________________________________________________________________________________________

S7E3

	how to create our own environment variables

		manage jenkins
			
			==>configure system
				==>global properties

					==>enviroment variable
						==>Add
							==>give name and value
							==>like country and all
			now in script

				echo "$COUNTRY"  //==>environment_variable name


________________________________________________________________________________________________________________

S7E4

	modify the jenkins url

	manage jenkins

		==>configure system
			
			==>jenkins location

				jenkins.local:8080

________________________________________________________________________________________________________________

S7E5

	meet the jenkins cron tab
	==>like backup job
	
	job 

	==>configure
		==>build triggers

			==>build periodically
				==>google cron execution at 1 am
					==>crontabguru

				==>will show its next execution

					H 1 * * * ==>will ask to replace 0 with H ==>will execute at 1 daily

					==>you will see start by timer in console


________________________________________________________________________________________________________________

S7E6

how to trigeer a job externally ?

	==>in that case authentication is required

	manage jenkins
		==>manage users
			==>crete user
	
	manage jenkins
		==>manage and assign roles

			create global roles

				==>under job
					==>tick build and write permission
				==>user/group to add


________________________________________________________________________________________________________________

S7E7

	trigger job

		==>build now ==>copy link address

			==>we need to pass token
		
		==>manage jenkins
			configure global security

				CSRP protection
					==>retrieve crumbs

crumb = $(curl -u "__:__" -s 'endpoint')


________________________________________________________________________________________________________________

S7E8
					
trigger job with parameter from script

	==>need to get token like above
________________________________________________________________________________________________________________

S8-s9


	..skip
________________________________________________________________________________________________________________

S10E2

	$ cat /proc/cpuinfo | grep cores

	$ free -h  ==> to get ram information

	add git in docker-compose file

	docker-compose up -d 
		==> now git image from docker hub will be pull

		system32 ==>driver==>etc ==>host ==>(//windows host file)

________________________________________________________________________________________________________________

S10E3


	create your first git repository


________________________________________________________________________________________________________________

S10E4


	==>how to create a user and permission

	==>overview ==>user ==>edit ==>set password ==>


	==>project ===>manage access ==>select members to invite

						==>add to project

	now check

		==>settings
			==>members

________________________________________________________________________________________________________________

S10E5

	==>sudo yum -y install git

	==>could not resolve host
		sudo vi /etc/hosts
	
		127.0.0.1 gitlab.example.com

	

________________________________________________________________________________________________________________

S10E6

get git code
	
	==credential
		==>jenkins
			==>global credential
				==>username
				==>password
	
	==>now go to job
		==>source code management
			==>credentaial that are added
			==>add repository url
				

	==>source code management

________________________________________________________________________________________________________________

S10E7

learn about githooks

	==>like a trigger

		==>when event happens

		==>docker ps

		==>docker exec -ti gir-server bash

		==>chown git:git dir -R  //==>owner is git and group is git

________________________________________________________________________________________________________________

S10E8

	test git hook

________________________________________________________________________________________________________________

S11E1
		




	...incomp		
_____________________________________________________________________________________________________________________________________________________
________________________________________________________________________________________________________________

S12E2

	Continous integration

	code ==> build ==> testing ==> deploy/promote to production ==>all goes to coding again


________________________________________________________________________________________________________________

S12E3

continous delivery

________________________________________________________________________________________________________________

S12E4

production




...incomp

________________________________________________________________________________________________________________

________________________________________________________________________________________________________________

E1

Computer Architecture

	4 main types of IC
		
		==>CPU or processor (dual core or core duo)

		==>GMCH (Graphics memory controller hub) IC
		
			==>aka north bridge

			==>RAM is connected to north bridge

			==>VGA is connected to northbridge

		==>ICH (input controller hub) 
			
			==>printer port

			==>USB port

			==>COM port 

			==>LAN port

			==>AUdio

			==>SATA

			==>IDE

			==>PCI slot

			==>FLoppy disk

			
				==>GMCH and ICH both combined known as chipset




		===>Super IO IC

			==>mouse

			==>keyboard

			==>CPU FAN

			==>BIOS IC

		


________________________________________________________________________________________________________________

S1E2

	==>4 important IC in motherboard

	==>platform controller hub (PCH)

	==>now processor will have ==>ram and VGA/DIsplay

	==>advanced PCH handles north and south bridge

		===>BIOS IC is co to PCH IC

	==>IO Ic acts as power controller for motherboard



________________________________________________________________________________________________________________

S1E3

SMPS ==>switch mode power supply gives upto 60% power

	rest motherboard manages itself


________________________________________________________________________________________________________________

S1E4

	===>parallel BIOS IC is replaced by serial BIOS IC



________________________________________________________________________________________________________________

S2E1

System memory
	
	primary memory
			
			==>ROM
				==>non volatile

				==>PROM
				==>EPROM
				==>EEPROM
				==>PROM

			==>RAM
				==>volatile(supply neeeded)
	
				==>SRAM (static RAM)
					==>speed more than DRAM
					==>CACHE
				
				==>DRAM
					==>SDRAM (synchronous DRAM)
						==>DDR1 (Double Data rate 1) ==>in one cycle , double data bit
						==>DDR2
						==>DDR3
						==>DDR3L (DDR3 with low voltage)
						==>DDR4
					
					pins are increased as DDRversion increased


	secondary memory
			==>permanent memory
			==>non volatile memory
			==>HDD
			==>SSD (solid state drive)
			==>CD/DVD
			==>Pendrive 
			==>Floppy






________________________________________________________________________________________________________________

S3E1

SMPS wires speicfication

________________________________________________________________________________________________________________

S4E1

	==>incomp

================================================================================================

______________________________________________________________________________________________________________________
S1E1-E7 (CCSK\[ DevCourseWeb.com ] Lynda)

CCSK certificate course

	VPC peering


	===>VPC > Subnet > instance

	==>new peeing

	==>new internet gateway

	==>new route table



______________________________________________________________________________________________________________________
S1E8

Network security

ACL (Access control list)

	==>by VNIC

	==>Virtual network sucnets
	==>use of security groups

	

______________________________________________________________________________________________________________________
S1E9

	VPC
		
		==>network ACL

			==>create new N/w ACL

			==>Associate VPC

			==>add inbound rules

			==>rule no is like priority here

				==>inorder to activate it aaosiate with subnet

			

______________________________________________________________________________________________________________________
S1E10

	VPN 
		==>encrypted network tunnel

		==>client-to-site VPN

		==>Site- to-site VPN


______________________________________________________________________________________________________________________
S1E11

client to site vpn 

	==>mutual authentication reqires PKI certificate

		go to VPC

			==>client VPN end point

				==>give name

				==>client IPv4 addresss


______________________________________________________________________________________________________________________
S1E12

	==>incomp



____________________________________________________________________________________________
	
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

part 02  module 01 lesson 1 concept 1(_prior_1_[FreeCoursesOnline.Me] UDACITY - Cloud DevOps Engineer v1.0.0))
____________________________________________________________________________________________________________________________
P2M1L1C1

	introduction

____________________________________________________________________________________________________________________________
P2M1L1C2

	==>intro kesha williams

____________________________________________________________________________________________________________________________
P2M1L1C3

	==acccess to unlimited computing power

	==>basics of cloud computing

____________________________________________________________________________________________________________________________
P2M1L1C4

	what is cloud computing

		=>database

		=>application power

	characteristica
		==>pay as you go
			==>minute or hourly
		==>auto scaling
			==>shrink or grow
		==>serverless
			==>manages server by cloud provider
____________________________________________________________________________________________________________________________
P2M1L1C5

	3 types of cloud

		Infrastructure as a service
		(IaaS)
			==>AWS
			==>digital ocean
		==>Platform as a service
			==>they manage hardware
				==>e.g godaddy
		Software as a service
			==e.g microsoft office 365
____________________________________________________________________________________________________________________________
P2M1L1C6

	3 deployment model

		==>public ==>e.g AWS 
		==>private	==>on premises ==>priperitory network ==>to limited no of people

		==>hybrid ==>combination of two
____________________________________________________________________________________________________________________________
P2M1L1C7

	==>ability to innovate quickly

	==>dont worry about capacity

	==>quickly go global

	==>latency ==>reponse time of API

____________________________________________________________________________________________________________________________
P2M1L1C8

	AWS, GCP, MS Azure

____________________________________________________________________________________________________________________________
P2M1L1C9

	AWS page
		Analytics ===>for big data

	various services

____________________________________________________________________________________________________________________________
P2M1L1C10

	AWS has global infrastructure

	Region ==>geographic location

____________________________________________________________________________________________________________________________
P2M1L1C11


	....incomp
















































