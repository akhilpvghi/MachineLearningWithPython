REST API in C


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <curl/curl.h>
#include <json-c/json.h>
 
 
 struct MemoryStruct {
  char *memory;
  size_t size;
};

static size_t
WriteMemoryCallback(void *contents, size_t size, size_t nmemb, void *userp)
{
  size_t realsize = size * nmemb;
  struct MemoryStruct *mem = (struct MemoryStruct *)userp;
 
  char *ptr = realloc(mem->memory, mem->size + realsize + 1);
  if(!ptr) {
    /* out of memory! */
    printf("not enough memory (realloc returned NULL)\n");
    return 0;
  }
  mem->memory = ptr;
  memcpy(&(mem->memory[mem->size]), contents, realsize);
  mem->size += realsize;
  mem->memory[mem->size] = 0;
 
  return realsize;
}



int main(int argc, char** argv)
{

CURL *curl;
CURLcode res;
struct json_object *parsed_json;
struct json_object *product_name;
struct json_object *client_id;
struct json_object *symmetric_cache_expiry;
struct MemoryStruct chunk;
 
  chunk.memory = malloc(1);  /* will be grown as needed by the realloc above */
  chunk.size = 0;    /* no data at this point */
  json_object * jObj = json_object_new_object();
  json_object *name = json_object_new_string(argv[1]);
  json_object *component_name = json_object_new_string("ProtectAppJCE");
  json_object *reg_token = json_object_new_string("vb27c7Q7fCLAXqWQQYkXH45nq87LwuAhoQnFCRm7fDtDoafpVLmAmvM1mlJbCv8e"); 
  json_object *component_version = json_object_new_string("8.9"); 
  json_object *os_version = json_object_new_string("Linux"); 
  json_object *rte_version = json_object_new_string("1.8.0_252"); 
  json_object *min_java_version = json_object_new_string("1.7.0"); 
  json_object *host_name = json_object_new_string("10.1.1.1"); 
  

  json_object_object_add(jObj,"name", name);
  json_object_object_add(jObj,"component_name", component_name);
  json_object_object_add(jObj,"reg_token", reg_token);
  json_object_object_add(jObj,"component_version", component_version);
  json_object_object_add(jObj,"os_version", os_version);
  json_object_object_add(jObj,"rte_version", rte_version);
  json_object_object_add(jObj,"min_java_version", min_java_version);
  json_object_object_add(jObj,"host_name", host_name);
  
curl = curl_easy_init();
if(curl) {
  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, "POST");
  curl_easy_setopt(curl, CURLOPT_URL, "https://52.86.120.81/api/v1/protectapp/clients");
  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);
  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, "https");
  struct curl_slist *headers = NULL;
  headers = curl_slist_append(headers, "Content-Type: application/json");
  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);
  curl_easy_setopt(curl, CURLOPT_POSTFIELDS,  json_object_to_json_string(jObj));
  curl_easy_setopt(curl, CURLOPT_SSL_VERIFYHOST, 0);
  curl_easy_setopt(curl, CURLOPT_SSL_VERIFYPEER, 0);
  curl_easy_setopt(curl, CURLOPT_USERAGENT, "libcurl-agent/1.0");
  curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteMemoryCallback); 
  curl_easy_setopt(curl, CURLOPT_WRITEDATA, (void *)&chunk);
  res = curl_easy_perform(curl);
  parsed_json = json_tokener_parse(chunk.memory);
  if(res != CURLE_OK)
       fprintf(stderr, "curl_easy_perform() failed: %s\n",curl_easy_strerror(res));
    else{
        int response_code;
        curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &response_code);
        // if(response_code>200 && response_code<300)
        json_object_object_get_ex(parsed_json, "product_name", &product_name);
        json_object_object_get_ex(parsed_json, "client_id", &client_id);
        json_object_object_get_ex(parsed_json, "symmetric_cache_expiry", &symmetric_cache_expiry);
        printf("\n\n Response code : %d\n\n Response size  %lu\n\n ",response_code, (unsigned long)chunk.size);
        printf("\n\n client_id: %s\n\n product_name:  %s\n\n symmetric_cache_expiry: %s\n\n", json_object_get_string(client_id),  json_object_get_string(product_name), json_object_get_string(symmetric_cache_expiry));

    }
}

  


//printf("\n%lu bytes retrieved\n", (unsigned long)chunk.size);
//json_object_object_get_ex(parsed_json, "duration", &duration);
//json_object_object_get_ex(parsed_json, "client_id", &client_id);
//printf("duration: %d\n", json_object_get_int(duration));
 //printf("client_id: %s\n", json_object_get_string(client_id));
//  printf("\n\n Response code : %d\n\n Response that we recieved  %s\n",response_code, (char*)chunk.memory);
  


/* Clean up Activity*/ 
curl_easy_cleanup(curl);
json_object_object_del(jObj, "name");
json_object_object_del(jObj, "component_name");
json_object_object_del(jObj, "reg_token");
json_object_object_del(jObj, "component_version");
json_object_object_del(jObj, "os_version");
json_object_object_del(jObj, "rte_version");
json_object_object_del(jObj, "min_java_version");
json_object_object_del(jObj, "host_name");
free(jObj);
free(chunk.memory);
 
  /* we're done with libcurl, so clean it up */
 curl_global_cleanup();
 

return 0;
}







++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
