before push the code   ..........git remote set-url origin <https://abc.xyz/USERNAME/REPOSITORY.git> 

____________________________________________________________________________________________________________


GIT STASH

git stash save “Your stash message”.

git stash list

git stash apply

_________________________________________________________________________

git config --global user.name "Frances Totten"
git config --global user.password "your password"
git config --global user.email "frances_t@fabrikam.com"
git config --list 

OR 

if problem persists

	==>go to credentia manager in windows 
	==>delete git password from window credentials
	==>generate token from developer setting on git
	==>and copy the token as password and it will be saved as in your git bash



Great done (detect some missing==>on 10-05-21)
________________________________________________________

to find about last commit on git

git log -n 1 [branch_name]

__________________________________________________________________

How to delete a commit in git, local and remote
Posted by adrian.ancona on July 8, 2011
It has happened to me more than once that I make a commit without verifying the changes I am committing. Time after that I review the commit and I notice that there is something in the commit that doesn’t belong there.

In those times what I want to do is make a patch with the changes of the commit, delete the commit, apply the patch and then redo the commit only with the changes I intended. In this post I will only explain how to delete a commit in your local repository and in a remote repository in case you have already pushed the commit.

Delete a local commit
Anthony Dentinger showed me in the comments that you can delete a local commit by doing:

git reset –hard HEAD~

Below is my original post, but you probably just want to use the line above

Lets say there is a repository with 4 commits.

1
2
3
4
5
$git log --pretty=oneline --abbrev-commit
46cd867 Changed with mistake
d9f1cf5 Changed again
105fd3d Changed content
df33c8a First commit
Commit 46cd867 is the most recent commit and the one we want to delete, for doing that, we will use rebase.

1
$git rebase -i HEAD~2
That command will open your default text editor with your two (Change the number 2 with the number of commits you want to get) latest commits:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
pick d9f1cf5 Changed again
pick 46cd867 Changed with mistake

# Rebase 105fd3d..46cd867 onto 105fd3d
#
# Commands:
#  p, pick = use commit
#  r, reword = use commit, but edit the commit message
#  e, edit = use commit, but stop for amending
#  s, squash = use commit, but meld into previous commit
#  f, fixup = like "squash", but discard this commit's log message
#  x, exec = run command (the rest of the line) using shell
#
# If you remove a line here THAT COMMIT WILL BE LOST.
# However, if you remove everything, the rebase will be aborted.
#
One thing to notice here is that the most recent commit is the one at the bottom. The comments at the bottom of the file give a description of the things that can be done with the rebase command, but this time none of this options is going to be used, we just need to delete the line that corresponds to the commit we want to delete and save the file.

We can see that the change was applied correctly:

1
2
3
4
$git log --pretty=oneline --abbrev-commit
d9f1cf5 Changed again
105fd3d Changed content
df33c8a First commit
Delete a remote commit
To remove a commit you already pushed to your origin or to another remote repository you have to first delete it locally like in the previous step and then push your changes to the remote.

1
$git push origin +master
Notice the + sign before the name of the branch you are pushing, this tells git to force the push. It is worth to mention that you should be very careful when deleting commits because once you do it they are gone forever.
 Also, if you are deleting something from a remote repository make sure you coordinate with your team to prevent issues.


_____________________________________________________________________________________

__________________________________

github

git-scm.com 

install git--->

git --version

git init---->from the folder where you want to start

cmd://====> ls -a

git status===>on which branch===>modified file, untracked file===>

git add filepath | .

create .gitignore file ====> node_modules/
				server.log
git add .gitignore

git commit -m "msg_for_commit"

____________________________________________________________

git config --get remote.origin.url

The above will only work if you've either cloned the repository or manually added a remote called origin.

If "git remote -v" doesn't show you any remotes you can simply add a remote using:

git remote add origin https://username@stash/scm/PROJECT/repo.git

https://community.atlassian.com/t5/Git-questions/fatal-No-such-remote-origin-after-git-remote-set-url-origin/qaq-p/401456


https://intellipaat.com/community/3102/git-show-remote-url-how-can-i-determine-the-url-that-a-local-git-repository-was-originally-cloned-from

$ git remote set-url origin https://github.com/USERNAME/REPOSITORY.git

===> :(  No such remote 'origin' ===>read article from starting ===> :)



https://help.github.com/en/github/using-git/changing-a-remotes-url

=================================================================

git push --set-upstream origin dev

// if you dont want to use origin agaain an again,
 you can associate upstream on specific branch

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

to revert to specific commit


git reset --hard 61cf982


git push -f origin branch_name

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++==

git branch -a  // to check all branch name


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++==


How to set up an SSH key and use it for GitLab

https://dev.to/sndrx/how-to-set-up-an-ssh-key-and-use-it-in-gitlab--42p1


 ssh-keygen -t rsa -C "your_email@example.com"   or  ssh-keygen -t rsa -b 2048 -C "<comment>"
 
 
 to update pass phrase at later time
 
 ssh-keygen -p -f /path/to/ssh_key  	(#  https://docs.gitlab.com/ee/ssh/)
 
 
 
 Go and open the id_rsa.pub file (you can use any text editor you want).
Copy the entire content of that file and then open https://gitlab.com/profile/keys.

5) Try to git clone or git push.


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

ssh -i "Desktop\Quincus\APIbluerhino (3).pem"  ec2-user@54.229.133.99
eval "$(ssh-agent -s)"
 ssh-add ~/azure_key
 git pull origin JsonFormatter
 
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 
 Add the private SSH key to the ssh-agent
If you don’t want to type your passphrase each time you use your SSH keys, you need to add it to the ssh-agent, which is a program that runs in background while you are logged in to the system and stores your keys in memory.

To start the ssh-agent in background, run the following:

$ eval "$(ssh-agent -s)"
That command outputs the ssh-agent process identifier:

Agent pid 2887
Then, add your SSH private key to the ssh-agent:

$ ssh-add ~/.ssh/id_rsa
Type your passphrase and press Enter:

Enter passphrase for /home/your_user_name/.ssh/id_rsa:
The command confirms that the private SSH key has been added to the ssh-agent:

Identity added: /home/your_user_name/.ssh/id_rsa (your_email@example.com)


now push the code

(# https://kamarada.github.io/en/2019/07/14/using-git-with-ssh-keys/#.YC0sHY8zaUk)
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


















