Advanced Web Development

S1E1

story of the course--->Hi-->by colt

HTML,CSS,Js--->

with Elie,Tim and Matt--->persons with quality of this tutorial

______________________________________________________________

S1E2

CSS Animation--->CSS Flexbox--->to build layouts--->

Asynchronous javascript--->promise,callbacks--->

Ajax---->asychnronous java ....find fullform.....

then Testing......>testing library jasmine--->

Advanced Array methods--->lodash or underscore library--->

cloure and keyword this...=----->

OOP with Js

--->creating your own apis-->node, mongodb

----->single page App

---------->ES2015--->

--->guess the password--->Refactor-->it's an app

----->D3 and DOM-->js library to make chart

------>D3 and data

------------>scalable vector graphics(SVG) and D3(pie chart and line graph)

---->Advanced D3---->tooltips--->map visualisation

------>D3 climate dashboard

---------->intro to React and JSX

----------->create react app and props

----------->react and state

---------->the virtual dom and react events

---------->the component lifecycle--->

--------->React and AUth

---------------->React router

------------->React & Redux

__________________________________________________________

S1E3

introducing team

________________________________________________________

S2E4

Animation intro

_________________________________________

s2e5

ANimation to css

--->tools css transform,keyframe--->

spieces-in-pieces.com

waark.com


site with animation

________________________________________

S2E6

why animation matter??

medium article-----> michael ---->improve the payment experience with animations

shaking--->when error?

sending OTP--->on button

planning is hard--->doing is easy

_____________________________________________

S2E7

how to trigger animation--->by clickeing, hover,focus etc

css 3 psueod classes---->

________________________________________
S2E8

pseudo class---->hover

div:hover {

background: purpole;

}

on codepen-------------> sign up---->

---->

h1:hover {
background-color: pink;
}

button:hover---->etc

______________________________________________________

S2E9

focus---->pseudo class--->when click or tab etc

inpot:focus {
color:red;
background-color: teal;
}

_____________________________________________________
S2E10

pseudo class--->active

MDN--->:active---->pseudo class site

button:active {
background-color: orange;
}

-------------->very brief time---->if we keepbutton clicked then it will be there

----->h1:active, P:active{
css
}
---->another way to mutiple tags

____________________________________________

S2E11--->webpage

_______________________________________________________

S2E12

expt---->

.brn {
outline: none;=====>by default by browser doing sth so rerender ot to remove button effect
border: none;
cursor: pointer;
display: block;
position: relative;
background: color_name;
font-size: px;
font-weight: px;
text-transform: uppercase;
letter-speacing: px;
box-shadow: x_offset y_offset color_name;
}

.btn:hover {
box-shadow: x_offset y_offset color_name;
}

#efa424===>bootstrap yellow color


.btn:active {

}

_________________________________________________

S2E13

introsuction to transform------->

transform--->cordinate---->move,warp,rotate and scale etc,,,,

---->developer.mozilla.org--->MDN---->Transform--->API may be

_________________________________________________________

S2E14

div {
	transform: translateX(100px); ======>simply translation ro x axis value can be negative
}


p:hover {
	transform: translate(x_px, y_px);=====>total will be counted from original origin
}

mainly reserved for animation----->

_________________________________________________________

S2E15

div {
transform: scale(2);===> zoom factor = 2 or can be 0.5===>sxaleX or scale(x_factor,y_factor)===>zoom will take place in x direction only
}

origin of scaling--->can be changed===>{transform-origin: 0 0; ===>or transform-origin: left}

_______________________________________________________

S2E16

rotate

div {
tansform: rotate(45deg);===>[positive then clockwise

====>origin can be transformed
--->MDN-->site to know

transform: rotate(90deg) scale(2);===>if did seprately then will be overridden
}

_________________________________________________________________

S2E17

browser prefixes or vendor prefexis??=====>MSN has article on it

autoprefixer.github.io------>if not working in other browser

pleeease.io====>another vendor prefixer

______________________________________________________________

S2E18

transistion---->to give time to transform

transistion duration
transition property
transidtion-timing-function===?linearly or how to consume duration
transition delay

_____________________________________________________________

S2E19

ytansition duration---->

.animated {
transition-duration: 1s;
}

+==========================================
transition-property: all | opacity | transform | background-color >>> or can be used with comma value of this property and hence can assign duration with comma repectively===>by default its all

we cannot seprate differnet transform for transition property

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

S2E20

transition-delay====>pause to get ready transition===>4s===> can have comma for respection transforms

-------->

transition-timong-function===>easings.net---->parameter can be found here

or MDN===>have live examples

NOTE---->runs with pseudo class only...? to check

________________________________________________________________________________


S2E21

shorthand===>combine 4 property in one

{
transition: _property_name, _duration_in_second, _timing_function, _delay;
}

______________________________________________________________

S2E22

performance of transistion

transform : translate(),scale(),rotate(),opacity===>best performance

html5rocks.com==>can be referred

______________________________________________________________

S2E23

expt===>>what we learnt so far....

3 things--->background,image and icon

in css--->we can import

like--->@import url('fontaswsemo.com')

div.item * {
	transition: all 1s ease-in-out; 
}

filter: grayscale(100%);===

div.item:hover i {
transform: scale(2);
}

________________________________________________________________________

S3E24

introduction to keyframes---->

multi state component--->transition is to single state--->

-------------->multi state animation--->


___________________________________________________________________

S3E25

defining and assigning===>two steps with keyframe===?

@keyframes #_name {

time_percent_objects, ..
}


----------------


defining---->

p {
animation-name: rainbow;
animation-duration: 2s;
animation-timing-function: linear;
animation-delay: 0s;
animation-iteration-count: infinite; 	
}

//assigning------>

@keyframes rainbow {

0%{
color: 'red';
}

50%{
color: 'red';
}

100%{
color: 'yellow';
}


}

___________________________________________________

S3e26

property of animations---->

animation-iteration-count
animation-fill-mode: =======>forawrd | backwards | both | none ;===>how to apply styling===>from 0 to 100% or 100% to 0%
animation-direction:============>forward | reverse | alternate
animation-play-state: =======> paused | running | resume .... ========>like pause animation
 
_________________________________________________
S3E27

animated sun/sky===>

timeline is important---->with time and styles===>

___________________________________________________

S3e28

@keyframes _name{
0%{}
10%{}  ===========>no comma
}


animation propery will be in somee css blocks called as selector===>

______________________________________________________
S3E29

shorthand animation

animation duration is first

animation delay is second

animation: slideRight 2s ease-in infinite 2s; ==>slideRight is animation_name that is keyFrame name in my words

____________________________________________--

S3E30

border-top-color: #1abc9c====>teal color===>nice green

margin: auto--->centre

@keyframes spin {

0%{
	transform: rotate(45deg)
}
}

forward===>to keep some animation till end like opacity 1;

++++++++++++++++++++++++++++++++++++++++++++++++++++++++

S4E31

outline:0 --->to ignore--->by default stylling by browser

 _____________________________________________

 S4E32

 flexbox--->

 what is flexbox?

 space distribution in various way--->

 horizontal or vertical-->both way

 css-tricks complete guide to flexbox--->site 

___________________________________________________________

S4E33

.container {
	display:flex;====>all elements to the left
}

+++++++++++++++++++++++++++++++++++++++++++++++++

S4e34

terminology====>

flex container===>
flex-item===>inside flex container
Main axis===>
cross axis===> 

both these axis are perpendicular

________________________________________________________

S4E35

flex properties===>

flex-direction: row;====>it is by default

flex-direction: row-reverse====>right to left

flex-direction: column===>top to bottom all flex item

flex-direction: column-reverse;====>bottom to top

_____________________________________________________________

S4E36

flex-wrap: item wants to be in single line or multiple line

flex-wrap: wrap;======>default is no wrap==>now using this property will go on another line

flex-wrap: wrap-reverse

_______________________________________________________

S4E37

justify-content===>specify space distribution

justify-content: flex-end====>right to left===>order will be same

	:centre===>all item will be in centre

	: space-between==>try to understand yourself

	: space-around==>try to understand yourself

	:flex-start======>by default

++++++++++++++++++++++++++++++++++++++++++++++++++
S4E38

remember space-between

_______________________________________________________

S4E39

display: dlex;
flex-direction: column;
justify-content: centre | space-between ;
flex-wrap: wrap;

________________________________________________________

S4E40

Allign-items====>along cross axis==>space between 

whereas justify_content====>along main axis

allig-item: flex-start | flex-end | centre | baseline ===>
	
	baseline------>there will bw baaseline and then alligned

flex-wrap: wrap;======>when size is more to adjust

dont worry about the spaces---->

______________________________________________________________

S4E41

allign-content===>along the cross axis==>space is distributed between rows

:stretch | space-betwwen | space-around | centre

by default allign-content: stretch : flex-start | flex-end



_________________________________________________________________________

S4E42

navbar at right corner

nav {
display: flex;
flex-direction:row; //row-reverse===>change order
justify-content: flex-end; // |centre


}


@media screen and (max-width: 920px){
nav {
justify-content:centre;
}
}

@media screen and (max-width: 920px){
nav {
flex-direction: column;
align-item:centre;
border-bottom: 1px solid blue;
border-bottom-color: blue;
transition : color 0.5s ease-in;
}
}


_________________________________________________________

S4E43

flex item properites===>on individual item

align-self=====>same as align-item but for individual ====>applies on single item

__________________________________________________________________

S4E44

Order===>

by default every item at order 0;

so we need to do like

.box-1 {
order: -1;
}
============>number doesn't matter but how they are related to each element


flex direction does matter in order..

________________________________________________________________

S4E45

not same proportion===>

available space====>uses

flex: 

flex-basis====>its like width and height according to flex-direction but not exactly width or height

gedd.ski===?difference between width and flex-basis

_____________________________________________________________________

S4E46

flex-grow====>use unused space extra space===> ratio==>

.box {

flex-grow: 1;

}

.box-2 {
flex-grow: 2;====>to use double of space available 
}

_____________________________________________________

S4E47

flex-shrink====>shrink ==>how space shuld shrink

flex-shrink: 0===>never shrink

 
gingle line=============> flex:flex_grow_no flex_shrink_no 200px;

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

S4E48

polygon.com

.container {
display:flex;

}

.background {
background: '';

}


flex-wrap and flex-basis together.....

flex:  grow_no shrink_no flex_basis_in_px;

font-size:2vw===>according to screen size;;;

_____________________________________________________________
_______



S4E49

holy grail(web design)

we can use percentage with flex-basis

spotify====>on holy grail (web dev)

_______________________________________________________________

S4E50

lets create holy grail (web-dev)

body{
display: flex;
flex-direction:column;
margin: 0;
min-height:100vh;
}

main {
display: flex;
}

article{
flex-basis:60%
background: orange;
}

header, footer {

}

@media all and (max-width: 640px) {

main {

}

}

_____________________________________________________________________

S4E51

problem in past with flex-box===>caniuse.com==>for various browser

autoprefixer.github.io

____________________________________________________________________

S5E52

Matt introduction..............

_____________________________________________________

S5E53

intro

_________________________________________
S5E54

website intro

___________________________________
S5E55

<a href="#">====>will back at the top


* {
margin:0;
padding:0;
box-sizing: border-box;

}


#fff===========>white color

_____________________________________________________

S5E56

fontawesome.io---.>

____________________________________________________________

S5E57

style only

++++++++++++++++++++++++++++++++++++++++++++++++++++++++

S5E58

@media (max-width: 800px) {

}

_________________________________________________________

S6E59

introducing tim---->

___________________________-___

S6e60


asynch code....

___________________________________________
S6E61

call back functions--

fn another fn and invoked by another fn


higher order fn===> which invokes callback fn

uses===>

advanced array method-->

browser events

ajax request-->

react Development--------->

_____________________________________________________

S6E62

forEach()===>apllication of  callback

forEach callback===>(str, index, array)

__________________________________________________________

S6E63

we get -1 if not available 

____________________________________________________

S6E64

findIndex callback

_________________________________________________

S6E65

the stack and the heap

what is stack==>ordered data structure===>

detail of invocation at top of stack--->

when returns --->its popped

main fn at the bottom of the stack===>

-----------------------------------------

heap===>memory area 

______________________________________________________________

S6E66

.join(" ")===>js function

________________________________________________________________

S6E67

setTimeout and setInterval===>

we get id with every Timeout to clearTimeout(timeoutId);

-----------------------------------------
var interValId = setInterval(callback, repeat_value); 

clearInterval(intervalId);


_____________________________________________________

S6E68

countDown example

_______________________________________________________________________

S6E69

eventloop and queue

Queue==>FIFO

eventloop is functionalty-->checks for queue when stack is empty===>if yes,front of queue is placed in stack

------

square(no.)===>function of Js

-------------------------------------------

Js is singleThreaded

___________________________________________________________________

S6E70

Promises basic--->

p1 = new Promise((resolve, reject)=>{

}) 


================>Math.random();=======>0 to 1

______________________________________________________________-

S6E71

Promise chaining

disadvantages of nested callback

code is read to hard

---->logic is difficult

---->code is not modular


________________________________________

S7e72

Intro to AJAX........

ASynchronous JavaScript and XML..,.,

Ajax is not library...... Not a framework...

It is approach to development.....

Site on adaptive path....ajax....

Pinterest.....

Ajax-----request in background....

----------------------------

S7e73

XML and json-----data formats

-----------------------0000---------------
S7e74

Var xhr = new XMLHttpRequest();------earlier......

Xhr.open(.GET, ". URL"    );
. Status
. Response Text
. Ready state == 1,2,3,4



api.github/zen------always simple api for rest...


clear()-----> on Console


--------------------------------------------

S7e75

Ajax to use on simple page......

Var BTN = document.querySelector('''#btn")
Var img = document.querySelector("#imgID");
BTN.addEventListener("click", ()=>{
XML request.....
....

Var url = JSON.parse(Xhr.responseText).key; 
Img.src=url;
}
----0-----------------0
Pintrest---- console---network.....xhr----see status...,,

Dog api example.....

<Script> tag  will always be under body tag

 


----------------------

S7e76

Bitcoin current price.....api hit assignment...,

USD, euro, gbp....bit coin api....

------------------00000---------------

S7e77

SpanSelector.innerText = data.message;

--------======================
S7e78

Problems with XHR

Syntax :(

16 years old.....

No streaming....

Now enter the fetch method to fetch api.....

Promise..... Type structure....,,,



fetch(url).then((Data)=>{
Data.json();
Data.status
}
)
.catch((0)=>{});

===================================
S7e79


fetch(url)

fetch(url, {
method: 'POST',
body: JSON.stringify({
key: value
})

})


more resource/option can be added on fetch=====> can be checked on MDN 

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

S7E80

http status 404 ===>goes to .then==>

.then((data)=>{
data.status
})

if(!data.ok)
throw Error("SOME ERROR!")

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

S7E81

randomuser.me/api


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

S7E82

var avatar = document.querySelector("#avatarID");

fullname.innerText = fullname;

fetch().then(parseJSON)

let parseJson =(res)=>{
return res.json()
}

----------------------->see the above logic---->arguement is passed automatically

___________________________________________________________________

S7E83

problem with fetch!!!

browser support......>internet explorer does not support fetch

________________________________________________________________________________

S8E84

AJAX with jQuery

Jquery library===>write less, do more

$.ajax

$.get

$.post

$.getJSON


------------->code.jquery.com====>

pick jquery 3

include script

$('#btn').click(()=>{

})



----->if code pen--->JS setting --->add external

_______________________________________________________-----

S8E85


$.ajax({
	method: "GET",
	url: "url" 

})
.done(()=>{})


_-------------------

	method: "GET",
	url: "url" 
	data: {}
	dataType: 'json'
=============>
api.jquery.com/jquery.ajax

------------------------------------

$("#btn").click(()=>{

$.ajax({
method: "GET",
url: ""
})
.done((data)=>{
console.log(data)
$("p").text(data[0]);
})

.fail(()=>{

})
})
===========================>data is already parsed json

__________________________________________________________________

S8E86

network----->xhr--->jquery uses ajax

_____________________________________________________________

S8E87

$.get("url")
.done(fn)
.fail(fn)

__________________

$.post("url" {key: value})
 .done(fn)
 .fail(fn)

_____________________---

$.getJSON("url")
 .done(fn)
 .fail(fn)

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

S8E88

random.cat/meow

.attr()========>to change src of image using Jquery

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

S8E89


$('#catImg').attr("src",data.file)

note $. n $()============>when to use . and ()


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

S8E90

api.jquery.com

=====>youmightnotneedjquery.com

AXIOS====>A lightweight 

github.com/mzabriskie/axios

CDN link on github.....

var url= "";

axios.get(url)
.then(fn)
.catch(fn(err))

=====================================================

S8E91

handling error with axios===>

axios.get("url",{

params: {

}
})

===>it has err.request and err.response

_________________________________________________________

S8E92

exercise video...........

____________________________________________

S8E93

All request in one

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++==

S9E94

intro to Ellie

_____________________________________________________

S9E95

testing with jasmine--->

____________________________________________

S9E96

Writing test in browser

unit test====>individually component test===>

jasmine===>testing tool

+++++++++++++++++++++++++++++++++++++++++++++++++++

S9E97

describe===>function to organise our test

it==========>inside descripe function--->in more detail

expect===>inside it function==>put our expectation

		describe("Earth")
			it("is round")

expect(value).toBe(true)


Matchers====>are the function used on expect

	toBe is ===
	not.toBe
	
toBeCloseTo====>similar

toBeDefined

toBeFalsey/ toBeTruthy

toBeGreaterThan/ toBeLessThan

toContain

toEqual  ====>matches value not refernce

jasmine.any()

____________________________________________________

S9E98

beforeEach(fn)===>runs before it function

afterEach(fn)===>

beforeAll() / afterAll()

____________________________________________________

S9e99

Spies====>spying on existing fn

calls.count()

_____________________________________________

S9E100

time dependent code

CLock---->

______________________________________________

S9E101

TDD

test driven deployment--->

1. write the test

------>

Jasmine is BDD--->Behavioural Driven development

_______________________________________________________

S9E102

integration tests

Acceptance tests

Stress Tests

__________________________________________

S10E103

forEach,map,every====>intro only

__________________________________________

S10E104

forEach===>invoked on array==>and callsback for every element===>always return undefined

[1,2,3].forEach((value,index,array)=>{})

==============>function don't have return statement returnsundefined

_________________________________________________________________________

s10E105

some forEach fn

__________________________________________

S10E106

map===>invoked on array
returns new array==>of same length

======>return is needed


__________________________________________

S10E107

function which have map===
>can be seen with two return statement

++++++++++++++++++++++++++++++++++++++++++++++++++++
__________________________________________

S10E108

filter===>invoked on array===>takes callback==>returns aarray of same or less size

arr.filter((value, index, array)=>{

return value > 2;
})

__________________________________________

S10E109

exercise on filter----->

__________________________________________

S10E110

some===>fn invokes on array==>is any of the the value returns true then it returns true

------------------------------
arr.some((val)=>{
return val>2;
}) 


__________________________________________

S10E111

every---->iterate through an array====>checks for every value in array and returns boolean


__________________________________________

S10E112


every fnctns

_____________________________________________________

S10E113

reduce====>function(accumulator,nextValue,index,array)

can take two parameter===>if second parameter is not passed then accumulator will be first value

______________________________________________________
S10E114

"akhil" in {akhil: "kumar"}

true

______________________________________________________________________

S10E115

excercise on reduce

____________________________________________________

S10E116

forEach
map
filter
some
every===>like and case and return boolean
reduce==>  

______________________________________________________________________

S11E117

closure and this keyword

intro


______________________________________________________________________

S11E118

closure==>is a function that makes

closure is only available when inner function uses some variable of outer function

_____________________________________________________________

S11E19

closure like private variable

______________________________________________________

S11E120

game with closure

___________________________________________
______________________________________________________________________

S11E121



closure recap

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
______________________________________________________________________

S11E122

this===>keyword in Js

______________________________________________________________________

S11E123

this in function is bad idea and hence ES% had "use strict" to give error for the same

______________________________________________________________________

S11E124

this in {} object refers to nearest parent key

________________
called as implicit binding

______________________________________________________

S11E125


call

apply 

and

bind

to explicitly set this refernce

explicit binding

______________________________________________________________________

S11E126


object.key.call(any parent object, may be person also)====>person={firstName: "akhil"}
______________________________________________________________________

S11E127

apply()===>function to give this functionality

call(this_refernce,arguement seprated by comma)

apply(this_refernce,single array to pass as paprameter to multiple values)

Math.max(nums); //NaN

Math.max.apply(this, nums); //7


______________________________________________________________________

S11E128

bind returns a function so that we can pass more parameter later time

va ellieCalc= addNumbers.bind(elie,1,2);
ellieCalc(3,4); // Elie just calculated 10

______________________________________________________________________

S11E129

why bind with example

______________________________________________________________________

S11E130

using og call, apply and bind function


______________________________________________________________________

S11E131

new keyword inro

______________________________________________________________________


S12e132

OOps intro....

==============================


S12e133

Oops intro.....

We use function and objects.....

============================
S12e134


Objective of constructor is to create object......

Solution is new keyword........

======================

S12e135

Multiple constructor.......

arguement is key word

====\=\\\\===================

S12e136

Recap.....

===============\\\\\=====

s12e137

Keep constructor with Capital word.....

=======================

S12e138

Prototype is a property added to every object created with constructor...

===========================\\\\======


S12e139

Uses of prototype.....

=============================

S12e140

To make common for every Property.....

=================================


S12e141

Exercise on Prototype.......

arrray.indexOf(value) ===-1 && person instanceof Person

===================================

S12e142

Inheritance......

Object. Create

=======================
S12e143

Inheritance exercise........

==============================

S12e144

Recap........

============================

S13e145

Node intro......

==================

S13e146

Minor project into......

==============================

S13e147

Deciding api end points......

=================================

S13e148

Installing node js

Cloud9----online Amazon platform to developer
-------c9.io------email... Cradit card not it's free....

=================================
C13e151

Delete everything after selecting nodejs environment.....

mkdir todoAPI

Npm init.....

Npm I --save express

touch index.js


var express = reqire(express);
App = express();

app.get('\',(REQ,RES)=>{
Res.send("hi server");
});

App.listen(process.env.PORT, callback);


=========>Can view from preview in same Amazon workspace.....


==============================

S13e152

Respond with json..,,,,,,

It's automatically

If we pass as string..... It will take as html;
If we pass object...... It will take as json.....
Also....
We have res.json({});

===============================

S3e153

5 commands are there......

Sudo apt install -y mongo
Mkdir data...
Npm I --save mongoose
Echo...
Chmod a+x mongod
./mongod=======> start mongo db server and kepp this terminal open.....

Then access this server using mongo cli==-==mongo


Show dbs
exit

==============================

S13e154

Connect app to mongo....,

Create schema....

Create models folder....
Index.js

Var mongoose = require (.  'mongoose' );
mongoose.set("debug", true);
mongoose. Connect('mongo db url');

mongoose.Promise = Promise;

module.export.Todo = require('/todo');

----------------[]]]-----]]]]
Todo.js

Var mongoose = require('mongoose');

Var todoSchema = new mongoose. Schema({
name: {
Type: String;
Required: "name can't be black"
},

Completed: {

Type: Boolean;
default: false

}

CreatedDate: {
Type: date,
default: Date.now()
}
});

Var  Todo = mongoose. Model(''name of schema", above_defined_schema);

module. Export = Todo;


=========\\\\\\\==============

s13e155


Use our todoroutes.js and make route.....


New folder routes===>
Index. Js


Var express = require ('express');
Var router = express.Router();


router.get('/', callback req ,res)
module.export = router;
--------------------------

In main entry point js......

Require this route..,,,

Var Todo routes = require('./route/todos');

app.use('/api/todos', todoRoutes);

============+======================

Now get db in todoRoutes

Var db = require(../model's);

router.get('/',calbback{

db.todo.find()
.then(todos{

res.jsomn(todos)
})

============================

13e156

post request in ---->routes-->todos.js

router.post('/',(req,res)=>{
res.send("");
})

//npm install --save body-parser
//www.getpostman.com

in main entry js===>

bodyParser = require('body-parser');


app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true}));


====================>

now in todos.js

router.post('/',(req,res)=>{
console.log(req.body);

db.Todo.create(req.body)
.then((newTodo)=>
{
res.json(newTodo)
OR
res.status(201).json(newTodo);
}
)
.catch()



//res.send("");
})

=====================>
to run===> node index.js //note index.js is main entry point



+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

S13E157

todo.js

router.get('/:todoId', (req,res)=>{
db.Todo.findById(req.params.todoId)
.then((founfTodo)=>{
res.json(foundTodo)
})
.catch()
})

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

S13E158

=====>routes===>todos.js

router.put('/:todoId,(req,res)=>{
	//res.send("UPDATE Route!");
	db.Todo.findONeAndUpdate({_id: req.param.todoID}, req.body,{new:true}) //rew.body is what to update
	res.json(toso);  //responds with old data by default ===>in order to repond with new data set one more parameter {new:true} // 3rd marameter in findOneAndUpdate
})
.catch((err)=>{})

=====================================================

s13E159

routes===>todos.js

router.delete('/:todoID', (req,res)=>{
	 //res.send("ok delete");
	db.Todo.remove({_id: req.params.todoId})
	.then(()=>{
	res.json({message: "deleted"})
	//console.log("deleted")
	})
	.catch((console )=>{})
})

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

S13e160

along with models and others create helper folder

====>todos.js

in helper todos....

copy callback fn of get and post request and paste in helper todos.js
by giving some name to it and export 

like
var db = require('../models');

exports.createTodo = callback fn()
exports.getTodos = callback fn()

module.exports = exports;

======================>


now we can change/refactor in routes ===>todos.js

var helpers = require('../helper/todos');

router.route('/')
.get(helpers.getTodos)
.post(helpers.createTodos)

//we can do same for others which have similar api but change in request type

router.route('/:todoId')
	.get(getTodo)
	.put(helpers.appropriate fn)
	.delete(helpers.appropriate fn)


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

S14E161

put request --->form data complete or not can be seen in network tab ??

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

S14E162

inn main entry file---->

app.get('/',(req, res)=>{
res.sendFile("index.html");
})
app.use(express.static('/public')); =====>as it is in main file

app.use(express.static(__dirname + '/views'))
----->make views dir---->index.html

<head>
<link rel="stylesheet" href="app.css" type="text/css">
</head>
<body>
<h1>Hello<h1>
</body>



---------------------
create dir public 

	====>app.css
	====>app.js
	
in app.css

h1 {
	color: purple;
}

==========>

in html-->before body end we can add script tag
<script type="text/javascript" src="app.js"></script>

=======================>

if tired of starting server===>

npm install -g nodemon

===>

nodemon index.js //now

++++++++++++++++++++++++++++++++++++++++++++++

S14E163

code.jquery.com

to get jquery cdn

paste script below <link> tag

++++++++++++++++++++++++++++++++++++++++++++++++++++++++

S14E164

in js===>

$(document).ready(()=>{
	$.getJSON("/api/todos")
	.then((data)=>{						//.then or .done both are supported
	console.log(data)
	})

addTodos=()=>{
	todos.forEach((data)=>{
	//console.log(todo.name);
	var newTodo =  $('<li class="task">'+todo.name+ '</li>');
	$('.list').append(newTodo);
	
	})
}
});

_________________________________________________________________

S14E165
to cross the task which are done
text-decoration: line-through;


addTodos=()=>{
	todos.forEach((data)=>{
	//console.log(todo.name);
	var newTodo =  $('<li class="task">'+todo.name+ '</li>');
	
	if(tolo.completed){
		newTodo.addClass("done");
	}
	
	$('.list').append(newTodo);
	
	})
}
});

+++++++++++++++++++++++++++++++++++++++++++++++++++++++

S14E166

$('#todoInput').keypress((event)=>{

if(event.which == 13){    //checking if entered is pressed everytime
	//create todo
	createTodo()
}
})

function createTodo(){
var usrTnput = $('#todoInput').val();
$.post('/api/todos',{name: usrInput})
.then((newTodo)=>{
console.log(newTodo);
$('#todoInput').val(''); // here we are setting input as blank now
//can add single li
})
.catch((err)=>{
console.log(err)
})

}
_______________________________________________________________

S14E167

deleting functionality
<li>     <span> X</span></li>


in app.js only

$('.list').on('click', 'span', ()=>{
  //$(this).parent().remove(); //we will get list removed
	var clickedId = $(this).parent().data('id');

	$.ajax({
		method: 'DELETE',
		url: 'api/todos'+clickedId
	})
	.then((data)=>{
	console.log(data);
	$(this).parent().remove(); 
	})
	.catch(()=>{})
	//console.log($(this).parent().data('id'));


}) // we are not directly handling event for span as it is not loading in starting and hence we are doing it on list which have span


 //now challenge is to get id
// use another property of jquery "data"

we can set here

addTodos=()=>{
	todos.forEach((data)=>{
	//console.log(todo.name);
	var newTodo =  $('<li class="task">'+todo.name+ '</li>');
	newToda.data("id",todo._id);   //to store id seperately by jsquery	
	if(tolo.completed){
		newTodo.addClass("done");
	}
	
	$('.list').append(newTodo);
	
	})
}
});



++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



S14E168

we want to set complete true if we click on list, but if we click on span , which is inside list===>we want to delete it

problemm====>

so what we can do is==>

$('.list').on('click', 'span', (e)=>{
e.stopPropagation();  ///stop bubbling up of event

 //adding in above codeabove

 ----------------------------------->
 function updateTodo(todo){
	var updateUrl= '/api/todos' + todo.data('id');
	var isDone = !todo.data('completed');
	var updateData = {completed: isDone}
	$.ajax({
	method: 'PUT',
	url: updateUrl,
	data: updateData
	}) 
	.then(()=>{
	todo.toggleClass("done");  //it is like toggling class 
	todo.date('completed',isDone) // to synch with db
	})
 }

//store one more property completed 
//newTodo.data('completed', todo.completed) // in above forEach


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

S15E169

javaScript popularity

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

S15E170

ES2015

ES1===>1997===>ECMA==>Europe computer....

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

S15E171

const keyword===>can not change the value of primitives

but can push into array==>

===>can not re-declare it

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

S15E172

let and var==>difference can be seen with the concept of hoitiong....

also let keyword is kind of associated with thw block===>

for e.g var keyword set i value to last in setTimeout==> but let keyword will start to work
after the working of setTimeOut only.....


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

S15E173

template string or string interpolation

`hello {name}`

===>also allow to write multi line....

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

S15E174


arrow fn===>

let add=()=> a+b; ====>if it is single line===>don't put return keyword


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

S15E175

arrow function do not have their this refernce.....

__________________________________________________________________

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

S15E176

if we have one parameter===>no need to put in parenthesis===>in arrow fn

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

S15E177

dafault parameters

function add(a=10,b=12)===>if there is no value ,these will be considered

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

S15E178

for..of loop===>can not be used for object

for in===>for object

=========================================================

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

S15E179

Rest operator==>

add(a,b,...c)===>third parameter automatically will become array of no. of items that are passed

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

S15E180

Spread operator

if not used in function then ... will be spread operaotor

to concat
arr3= [...arrr1,...arr2]

====>basically spreads the array

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

S15E181

some excercise on spread and rest
fn findMIn(...args){
return Math.min(...args);
}

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

S15E182

object enhancement===>

shorthand notation===>

if key and value are same then simply 

var instructor ={
firstName,
lastName
}

------------------------------------------

 in object we can not have arrow function 
so can simply write as

var instructor ={
sayhello(){
return "hello";
}
}
==>in abovve e.g==>kay is sayhello and value is hello

_______________________________________________

computed property name
fn = "name";

inst {
[fn]="akhil"
}


_____________________________________________________________

S15E183

Object destructuring object

instructor={
fn : "a",
ln : "b"
}
var {fn,ln} = instructor;
or
to give other name
var {fn:fname,ln:lname} = instructor;

fname//a
lname//b


_____________________________________________________________

S15E184

Array destructuring===>

arr=[1,2,3];
var [a,b,c]=arr;

helps in swapping algorithm....


_____________________________________________________________

S15E185

destructuring exercise

_____________________________________________________________

S15E186

Recap

_____________________________________________________________

S16E187

Intro

_____________________________________________________________

S16E188

refactoring intro

_____________________________________________________________

S16E189

guess game code understanding....

_____________________________________________________________

S16E190

loop must have let===>
==>string template
callback==>to arrow function

_____________________________________________________________

S17E191























by akhil

===>models
            ====>index.js===>this will contain
                       mongoose setting and export                              
                      schema

            ====>todo.js===>this is schema



























