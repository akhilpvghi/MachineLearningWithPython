Udemy - Bash Scripting for Beginners Learn to Script!

____________________________________________________________________________________________
S0E1

	==>introduction

	==>traffic monitoring


____________________________________________________________________________________________
S1E1

	utilities iused in this couse

	echo
		==>$echo hello world

	grep
		==>used to search for sring in file

		$ grep echo file_name

			==>searched for echo string in file

		$ grep echo

			==>will be searching string echo whatever you will be entering

		$ awk '{print $1,$3}' filename ==>will print first and third string in file

		$man cat ==>to get help

____________________________________________________________________________________________
S1E2

	script structure

	#!/bin/bash
	
	#this simple script echoes some text
	
	echo this is the first siimple text

	function second_simple_text()
	{
		echo this is second function
	}

	second_simple_text

	// function needed to be called after defining

____________________________________________________________________________________________
S1E3


variable and environments

	==>set  ==>to check all variables in environment

	==>by default it is a type of string

	#!/bin/bash

	A="This is variable A"
	B="This is variable B"

	echo $A
	echo $B

	chmod +x variables

===>only execution permission is needed once

	echo "this will expand: $B" ==>correct value of variable b will be printed

	echo 'This will NOT expand: $B' ==>single quotes does not print value

	or 

	echo "this will expand: $A. this will not expand: \$B"

========================

A="30"
B=4

C=$(($A + $B))

echo $C //34 ==>arithmetic evaluation

____________________________________________________________________________________________
S1E4


	script and function parameter

	echo $@ ==> we are expecting parameter when script runs

	echo $# ==>no of parameter we have received

	echo $1 ==>will print first parameter we have received

	echo $0 ==>will give script name

	shift ==>shift will shipt parameter while accessing except $0 parameter

	+===================

	function func_param() {
	
		echo func_param: $@
		echo func_param: $#


	}

func_param $1 $3 ==>now it doesnt matter how many parameter we re passing we are using only 1st and 3rd paramets 

____________________________________________________________________________________________
S1E5

ls -l >ls.output

		==>will put output of this to given file name

echo"this is a test file" > test_file ===>will be over written

inorder to append ==>use double sign " >>"

=================

grep "aug 15" < ls.output

or


grep "aug 15" ls.output ==>now here file is used as parameter

____________________________________________________________________________________________
S1E6

pipes

	==>output to one and input to second command

	ls -l | grep "aug 15"

		===>input used | by this command

	cat /proc/cpuinfo | grep "model name" | cut -d':' -f 2  ==>d is delimeter ==>f is representing which parameter to use



____________________________________________________________________________________________
S1E7

command susbstitution 

	==>emacs file.bash ==>like vi editor tool

	#!/bin/bash

	read A
	read B

	C=`expr $A + $B`

	echo $C
	
	echo "the result of $A + $B is `expr $A + $B`"

	OR

	echo "the result is $(($A +$B))"


			===>addition happened



____________________________________________________________________________________________
S1E8

if statements
	
	==>basic control case

	#!/bin/bash
	
	if[[ $# -ne 1]]
	then
		echo Wrong number of arguements. should be one.
		exit 2
	fi

		==>checks for only one parameter, no more than one parameter should be there

	if [ -e $1 ] ==>// OR if test -e $1
	then
		echo The file exists.
	else
		echo the file doen not exist
	fi

==========================

if [[ -e $1 && $1 -nt $0 ]]
then
echo the file exist and newer version
else
echo file doen not exist or new newer version
fi


____________________________________________________________________________________________
S1E9

case satements

	#!/bin/bash
	if [ $# -ne 1]
	then 
		echo I only know to greet exactly one person
		exit 2
	fi

	case $1 in
		Andrew)
			echo Hi there, $1
			echo How are you today?
			;;

		Newman)
			echo Hello, $1
			;;
		*)
			echo Nice to meet you
			;;
		esac

			==>//break is like automatically 


____________________________________________________________________________________________
S1E10

while until structure

	#!/bin/bash
	
	while [ "$REPLY" != YES]
	do
		echo Welcome to the meeting!
		echo Do tou agree with the same way I want to do things?

		read

		sleep 2
	done

=====
until ["$REPLY" == Yes ]   //===>kind of opposite way of while

____________________________________________________________________________________________
S1E11

for loop
	
	#!/vbin/bash

	for((i=1;i<10;i++))
	do
		echo -n "192.168.1.$i"	===>-n will allow next to print in same line
		if ping -W 1 -c 1 192.168.1.$1 > /dev/null
		then
			echo check!
		else
			echo no
		fi
	done



====================================================================================================

2nd form of for loop

	for i in 192.168.1.1 192.168.1.2 www.google.com 192.168.1.7
	do
		echo -n "$i "
		if ping -W 1 -c 1 $i > /dev/null
		then
			echo check!
		else
			echo no
		fi
	done

=================================================================================

rm -f my_example_file_*

for ((idx=0;idx<20;idx++))
do
	touch my_example_file_$idx
done

for myFilw in my_example_file_*
do
	echo "This is $myFile file" > $myFIle
done

=====>if we want to wrie only file number greater than 10

for myFIle in my_example_file_??
do
	echo "this is $myFIle file" > $myFile
done

	
____________________________________________________________________________________________
S2E1

#!/bin/bash

filename=
interface

function usage() {
	echo $0 -i interface -f filename
	exit 1
}

function extract_params() {
	if [ $# -ne 4]
	then
		usage
	fi

	while [$# -gt 1]
	do
		case $1 in
			-f)
				filename=$2
				;;
			-i)
				interface=$2
				;;
			*)
				usage
			esac
			shift
			shift
		done
}

extarct_params $@

echo interface $interface
echo filename $filename

____________________________________________________________________________________________
S2E2

..cont from S2E1

extract_params $@

DATE = `date + "%Y-%m-%d %H:%M"`

date_string = `cat /proc/net/dev | grep -w $interface | cut -f 2 -d':' | awk `{print $1,$2,$9,$10}``

if [-z "$data_string"]
then 
	echo interface $interface does not exist
fi

rx_bytes = echo $data_string | awk '{print $1}'`

rx_packets = echo $data_string | awk '{print $2}'`

if [! -e $filename]
then
	echo "data" > $filename
fi

____________________________________________________________________________________________
S2E3


cron tab

	==>in specific time

	==>cron daemon ==>prescheduled time

	
	#!/bin/bash

	date +"%Y-%m-%d %H:%M:%S" >> dates.txt

	===================

	emacs myCrontab

	# m h dom mon dow usercommand   ==>//min hour day_of_month  
	* * * * * /home/mortal/date_me.bash
	
	==>//given script must be executable

	$crontab myCronTab

	crontab -l ==>to check if its installed

	crontab -r ==>will remove crontab

	crontab -l ==>will be cleaned now

____________________________________________________________________________________________
S2E4

	 cron check interface



			....done

=====================================================================================================================================================================================

==========================================================================================================================================================

 ([Coursezone.net] Complete Linux Bash Shell Scripting Thru Real Life Examples)

by Imran Afzal
____________________________________________________________________________________________________________________________________________

S1E1

course syllabus overview

	==>Lab setup

		==>what is virtual machine

		==>linux installation

	section 2
		==>shell scripting

		==>interaction with kernel

		==>different shell

		==>starting a shell

	section 3(scripting standards)
		
		==>proper naming convention

		==> permissions

		==>shell script format

	setion 4
		==>basic shell scripts

	section 5

		==> Real life scripts


____________________________________________________________________________________________________________________________________________

S1E2

	==>to automate your task


____________________________________________________________________________________________________________________________________________

S2E1	

	lab setup
		
		what is virtual environment or machine..?

		==>what is Oracle virtual box ..?

		==>installing virtual box

		==>creating first virtual box  ...?

		==>linux installation

		==>CentOS


____________________________________________________________________________________________________________________________________________

S2E2

what is oracle virtual box..?

	==>centOS linux operating system

	==>it is open-source hypervisor for x86 computers

	hardware ==>OS ==>Oracle virtual Box ==> (linux , windows , mac)


____________________________________________________________________________________________________________________________________________

S2E3

	==>google type ==>oracle virtual box download

	==>go to download

	==>windows hst

	==>save the file

	==>leave everything default

	(109 mb exe it is)


____________________________________________________________________________________________________________________________________________

S2E4

	==>creating first virtual box

	==>like cntainer

	==>click on new

		==>name

		==>linux 64

		==>size of memory (ram)


____________________________________________________________________________________________________________________________________________

S2E5

install linux

	===>will do later


____________________________________________________________________________________________________________________________________________

S3E1

	shell scripting basics

	==>what is kernel ..?

	==>what is shell  ...?

	==>what is shell scripting?

	==>types of shells

	==> starting a shell

	==>how to run a shell script



____________________________________________________________________________________________________________________________________________

S3E2

	linux kernel

		==>interfaces between hardware and shofware


		==>OS == kernel + shell


____________________________________________________________________________________________________________________________________________

S3E3

what is shell?

	==>like container ==>contains information

	==>echo $0 ==>to find your shell

	==> cat /etc/shells ==>list all shell

	==>cat /etc/passwd



____________________________________________________________________________________________________________________________________________

S3E4

what is shell scripting ...?


	put instruction in a shell and run it

	like blowing air in shell

	

____________________________________________________________________________________________________________________________________________

S3E5

Types of shells

	==>Gnome

	==>KDE

	==>sh   (it is original by stephen born)

	==>bash (born again shell)
		==>more enhanced features

	==>csh and tcsh

		==>tcsh (doesn't run bash script)

	==>ksh (by David Korn)

		===>compatible with shell and bash


____________________________________________________________________________________________________________________________________________

S3E6

	start a shell

	==>simply type shell name

	==>echo $0  ==>(to check shell)

	==> view contents of home

		==>it is in gnome environment

	if you want to channge shell just give name

	$sh
	echo $0

	to exit ==>$exit


____________________________________________________________________________________________________________________________________________

S3E7

how to run a shell script

	==>absolute path or relative path

	~ => /home/user/dir/file_name

	when you are inside directory you have to specify that you to run it from here

	==> ./script_name

	==>only if you are giving script name


____________________________________________________________________________________________________________________________________________

S4E1

welcome to scripting standards

____________________________________________________________________________________________________________________________________________

S4E2

Script Naming conventions

____________________________________________________________________________________________________________________________________________

S4E3

Script File permissions

	chmod a+x ==>giving excuutable permission to all users

____________________________________________________________________________________________________________________________________________

S4E4

Script format

	==>first is define a shell

		==> #!/bin/bash
	
		==> # comments

		==>define variables (e.g name = Akhil)

		==>commands (echo, cp, grep etc.)

		==>statements (if, while, for etc.)

		==>vim is updated of vi

		==>but vi supports everywhere

			#!/bin/bash
			# Pupose: Testing script format
			# Date: 14/04/2021
			# Modification: 14/04/2021
			a='My name is AKhil'
			
			echo $a

____________________________________________________________________________________________________________________________________________

S4E5

Sequence of script execution

	==>top to bottom

			
____________________________________________________________________________________________________________________________________________

S5E1

	Basic shell scripting


____________________________________________________________________________________________________________________________________________

S5E2

create basic script

	you will only delete if dir is created by user not root otherwise only root can delete it

	vi bashfile  ==>we add bash extension if we want
	#!bin/bash
	# Author: AKhil
	# Date Created: 14/04/2021
	# Description : 
	# Date Modified: 

	echo Hello World

	$ls -ltr
	$chmod a+x bash_file
	$ /home/akhil/scripts/bash_file ==>with absolute

	$./bash_file ==>//absolute path

		echo
		echo Hello world
		echo

			==>to give like \new line



____________________________________________________________________________________________________________________________________________

S5E3

					
	Basic task script
	
		==>pwd
		ls
		whoami
		date
		cal
		touch a b c ==>create three file in same directory

	==>write script

		==>$vi basic_task
			#!/bin/bash
			# Author: Akhil
			# Date: 
			# Description:
			# Date Modified:

			echo 
			echo This Script will run basic tasks
			echo
			pwd
			ls
			whoami
			date
			cal
			touch a b c

			:wq!

			ls -ltr ==>the order in which they are created


____________________________________________________________________________________________________________________________________________

S5E4

Basic administrator task

	top
	df -h ==>when was the system reboot
	free -m
	uptime
	iostat

	>>>vi admintask
		#!/bin/bash
		#Author:
		#Date:
		#Description
		#Date modified:

		echo
		echo This script will run basic administrator commands
		echo
		top		==>will keep your session open and run in real time
		echo
		df -h
		echo
		uptime
		echo
		iostat
		echo
		echo end of script

		>>$chmod a+x admintask
		
	
		hence now

		top | head -10 ==>now it will pipe/give only 10 lines



____________________________________________________________________________________________________________________________________________

S5E5 (defining variables)

	cal 2018 ==>calendar

____________________________________________________________________________________________________________________________________________

S5E6 (6. InputOutput Script)

read 
echo

==========

echo what is your name?
read namecont  //===>will automaticalyy will be convert into variable
echo hello $namecont

	==>// if you want to use variable direcly is echo ==>you need  `` tilde operator while assigning variable

____________________________________________________________________________________________________________________________________________

S5E7. ConditionsIf else statements Scripts

	...skipped

____________________________________________________________________________________________________________________________________________

S5E8. Case Statements Script
	
	...skipped

____________________________________________________________________________________________________________________________________________

S5E9. For loop Script

	...skipped
____________________________________________________________________________________________________________________________________________

S5E10. do-while Scripts

	...skipped

____________________________________________________________________________________________________________________________________________

S5E11

==>exist status

	status code 0 to 255

0 ==>OK or successful

1 ==> minor problem

2 = serious problem

3-255 = everything else

==>echo $? ===>get status of last running command

____________________________________________________________________________________________________________________________________________

S6E1

Real life shell cripting

	==>intro


____________________________________________________________________________________________________________________________________________

S6E2

Accessing data from file

	su -    ==>to login as root

	chown user_name filename

	chgrp user_name filename

	exit ==>exit out of root

	
		==>
		#!/bin/bash
		#Description find errors only

		grep -i error /home/user_name/professional-scripts/messages


____________________________________________________________________________________________________________________________________________

S6E3
	

	==>checking other server connectivity

	==>script writing


____________________________________________________________________________________________________________________________________________

S6E4

	Crontab

==>crontab -e ///(e is for edit)

34 20 * * * /script_name > output_file
//min hr day_of_month month_of_year day_of_week


we can also notify(email) via crontab 
____________________________________________________________________________________________________________________________________________

S6E5

Script to delete files
	
	==>to check this script , we will create file older timestamp

	==>find and rename old files

	==>$ touch -t "Thu, 1 March 2018 12:30:00" a /////===>creting file with ourtimestamp
	
	==> find /path -mttime +90 -exec ls -l {} \;

		==>/the above command file will file 3 months olde file

	$ vi deleteOlderfiles

	#!/bin/bash
	# Author Akhil
	# Date: 22/04/2021
	# Description: This is to delete older files
	
	
	find /path -mttime +90 -exec rm {} \;

		==>will delete all files


	==>// to rename
	find /path -mttime +90 -exec mv {} {}.old \;


____________________________________________________________________________________________________________________________________________

S6E6

	==>that will backup our file system

	==>will be cretaing backup /etc  and /var

	==>compress the backup .tar file using gzip command

	==>write a script to automate backups

	$su -   //==>to become root
	$whoami //
	$tar cvf /tmp/backup.tar /etc /var  ==>will be backig up /etc and /tar

	$gzip /_path/backup.tar ==> backing up is different from compressing

	vi backupfs //==>fs =>filesystem

	#!//bin/bash
	# Author:  AKhil
	# Date: 22/04/2021
	# Description: to create backup

	tar cvf /backup_location_to store/filename.tar /etc /var

	gzip /tmp/backup.tar  //==>absolute path is needed

	find backup.tar.gz -mtime -1 -type -print &> /dev/null

	if [ $? -eq 0 ]
		then
		echo Backup was created
		echo
		echo Archiving Backup
		scp /tmp/backup.tar.gz root@IP:path
		else
		echo Backup failed
	fi
$chmod a+x backupfs

____________________________________________________________________________________________________________________________________________

S6E7

vi simplecount

#!/bin/bash
#Author
# Date:
# Description
# Modified

for i in {1..10}
do
	echo $i
	sleep 1   //its in second
done

chmod a+x simplecount
>>> ./simplecount

==============================

//create multiple files with script

vi createfiles

#!/bin/bash
...
...

for i in {1..10}
do
	touch imran.$i
done			//touch creates file too


:7 ===>will go to line no 7

//create multiple files with input

read num_of_files
for i in $(seq 1 $num_of_files) //.. only works with integer, seq is sequence
do
	touch akhil.$i
done 

===============================================================================================

assign write permission to everyfile

chmod a+w akhil.*

for i in imran.*
do
	chmod a+w $i
	sleep 1
done

==================================================================================================

total = `ls -l akhil* ? wc -l`  ==>//will give total no of file start with akhil

echo it will take $total seconds to assign permissions..


____________________________________________________________________________________________________________________________________________

S6E8

==>rename all *.txt to none
==>to check if file exists or not

vi renamefiles

#!/bin/bash
# Author:
# Date:
# Description:
# Modified: 

for filename in *.txt
do
	mv $filename ${filename%.txt}.none
done

chmod a+x renamefiles

>>touch akhil.txt amit.txt ==>//will create multiple files

=========================================================================================

check to see if file exists

vi checkforfiles

FILES ="/etc/passwd
/etc/group
/etc/shadow
/etc/fake"

echo 
for file in $FILES
do
	if [ ! -e $file ]
	then
	echo the $file does not exist
	echo
	fi
done

____________________________________________________________________________________________________________________________________________

S6E9

copy file to remote host

vi copyfilestoremote

#!/bin/bash
# Author
# Description:
# Date:
# modified:
=========
a=`cat /home/user/filename`
for i in  $a
===========
OR
==========
for i in redhat1 redhat2 redhat3 redhat4
do
	scp file_name $i:/tmp
done


____________________________________________________________________________________________________________________________________________

S6E10


Directory assignment

cd /home
mkdir junos

cd /tmp
vi chkdir

#!/bin/bask
# Author:
# Date:
# Description:
# Modified:

cd /home
for DIR in *
do
	CHK=$(grep -c "/home/$DIR" /etc/passwd)
	if [ $CHK -ge 1 ]
	then
	echo $DIR is assigned to a user
	else
	echo "$Dir is NOT assigned to a user"
	fi
done

chmod a+x checkdir

____________________________________________________________________________________________________________________________________________

S6E11

==>to list of user who logged in
==>logged on some specific date

#!bin/bash
# Author:
# Date:
# Description:
# Modified:

//last | grep Mon

today = `date | awk '{print $1,$2,$3}'`
last | grep "$today" ==>quote is necessary since it is one string

=================

echo "Please enter day (e.g. Mon)"
read d
echo 
echo "please enter month (e.g. Aug)"
read m
echo
echo "Please enter date (e.g. 28)"
read da
echo

last | grep "$d $m $da"


____________________________________________________________________________________________________________________________________________

S6E12

grep -i error ==>/// ignore case sensitivity

tail -fn0  //-f is live, n0 ==>only look for latest

#!/bin/bash

tail -fn0 /var/log/message | while read line
do
echo $line | egrep -i "refused|invalid|error|fail|lost|shut|down|offline"
	if [ $? = 0 ]
	then
	echo $line >> /tmp/filtered-messages
	fi
done
===========
to put something in var/logs  file
logger -t error "akhil is testing"

===================

==>send message to IT pf errors

IT = "akhil@hotmai.com akhilpvghi@gmail.com"

if [ -s /tmp/filtered-messages ]
	then
	cat /tmp/filtered-messages | sort | uniq | mail -s "syslog message" $IT
	rm /tmp/filtered-messsages
	else
	fi
==============
____________________________________________________________________________________________________________________________________________

S6E13


1 - Create User Account

#!/bin/bash

echo "Please provide a username?"
read u
echo

useradd $u
echo $u account has been created

====================================================

2 - Error out if user exist
 #!/bin/bash

echo "Please provide a username?"
read u
echo

grep -q $u /etc/passwd
        if [ $? -eq 0 ]
        then
        echo ERROR -- User $u already exist
        echo Please choose another username
        echo
        exit 0
        fi

useradd $u
echo $u account has been created

====================================================

3 - Add user description
#!/bin/bash

echo "Please provide a username?"
read u
echo

grep -q $u /etc/passwd
        if [ $? -eq 0 ]
        then
        echo ERROR -- User $u already exist
        echo Please choose another username
        echo
        exit 0
        fi


echo "Please provide user description?"
read d
echo

useradd $u -c "$d"
echo $u account has been created

====================================================

4 - Add User ID
#!/bin/bash

echo "Please provide a username?"
read u
echo

grep -q $u /etc/passwd
        if [ $? -eq 0 ]
        then
        echo ERROR -- User $u already exist
        echo Please choose another username
        echo
        exit 0
        fi


echo "Please provide user description?"
read d
echo

echo "Do you want to specify user ID (y/n)?"
read ynu
echo
        if [ $ynu == y ]
        then
        echo "Please enter UID?"
        read uid

        useradd $u -c "$d" -u $uid
        echo
        echo $u account has been created

        elif [ $ynu == n ]
        then
        echo No worries we will assign a UID
        useradd $u -c "$d"
        echo
        echo $u account has been created
        fi

====================================================

5 - Add User ID check
#!/bin/bash

echo "Please provide a username?"
read u
echo

grep -q $u /etc/passwd
        if [ $? -eq 0 ]
        then
        echo ERROR -- User $u already exist
        echo Please choose another username
        echo
        exit 0
        fi


echo "Please provide user description?"
read d
echo

echo "Do you want to specify user ID (y/n)?"
read ynu
echo
        if [ $ynu == y ]
        then
        echo "Please enter UID?"
        read uid
                grep -q $uid /etc/passwd
                if [ $? -eq 0 ]
                then
                echo ERROR -- UserID $uid already exist
                echo
                exit 0
                else
                useradd $u -c "$d" -u $uid
                echo
                echo $u account has been created
                fi
        elif [ $ynu == n ]
        then
        echo No worries we will assign a UID
        useradd $u -c "$d"
        echo
        echo $u account has been created
        fi




____________________________________________________________________________________________________________________________________________

S6E14

Script to disable users accounts



Test Commands

lastlog -b 90

lastlog -b 90 | tail -n+2

lastlog -b 90 | tail -n+2 

lastlog | tail -n+2 | grep 'test' | awk '{print $1}'




Disable account with For loop

#!/bin/bash

a=`lastlog | tail -n+2 | grep 'test' | awk '{print $1}'` // tail -n+2 ==>ignore top line, grep -v 'test' ===>ingore test and accept everything else

for i in $a
do
usermod -L $i
done




Disable using xargs

lastlog | tail -n+2 | grep 'test' | awk '{print $1}' |
  xargs -I{} echo {}


lastlog | tail -n+2 | grep 'test' | awk '{print $1}' |
  xargs -I{} usermod -L {}



____________________________________________________________________________________________________________________________________________

S6E15


kill zombie process, kill child process if parent process stops

==>create a dummy process
==>then find process id
==>create a script to kill it

==>
sleep 600 ==>a process is created

duplicate sessiom

>>ps -ef | grep "sleep 600" | grep -v grep

>>>ps -ef | grep "sleep 600" | grep -v grep | awk '{print $2}' | xargs -I{} kill {} //==>we can do echo in place of kill



____________________________________________________________________________________________________________________________________________

S6E16

disk space status

find disk space using df command

df -h		===>use % should be less than 90

a = `df -h | egrep -v "tmpfs|devtmpfs" | tail -n+2 | awk '{print $5}' | cut -d'%' -f1`  ///===>cut will remove percentage sign

for i in $a
do
	if [ $i -ge 90 ]
	then
	echo check disk space
	fi
done

=========

df -h | egrep -v "tmpfs|devtmpfs" | tail -n+2 | awk '{print $5}' | cut -d'%' -f1  ///===>cut will remove percentage sign

====================

df -h | awk '0+$5 >= 10 {print}' // anything greater than 10 in 5thn column


____________________________________________________________________________________________________________________________________________

S6E17

status on total number of file

==>create a script to perform comparison

touch file{1..20}.txt //will create 20 files

ls -l file* | wc -l //wc -l is to get count number

a=`ls -l | wc -l`

if [ $a -eq 20 ]
	then 
	echo yes there are $a files
	else 
	echo Files are less than 20
fi

____________________________________________________________________________________________________________________________________________

S6E18

create system inventory

>>touch database  //to create input files
vi add-records

#!/bin/bash
#
#
#
#

echo please enter hostname?
read host
echo
	grep -q $host /home/user/ps/database //--->-q is for silent, no output print i suppose
	if [ $? -eq 0 ]
	then
	echo ERROR -- Hostname $host already exist
	echo
	exit 0
	fi
echo Please enter IP address?
read IP
echo
	grep -q $IP /home/user/ps/database
	////already exist check

echo $host $IP >>/home/user/ps/database
echo the provided record has been added

chmod a+x add-record
=======================================

//delete records

#!/bin/bash
#
#
#
#
clear
cp add_records delete_records
echo please enter hostname or IP address
read hostip
echo
	greap -q $hostip /home/user/ps/database
	if [ $? -eq 0 ]
	then
	echo
	sed -i '?'$hostip'/d' /home/user/ps/database ==// '/'$hostip'/d' ==>trying to find hostip, replace it with d that is delete, '/s/'$hostip'/old' ==>will replace with old like regEx
	echo $hostip has been deleted
	else
	echo doesnot exist
	fi

=======================================


 ==>third scripy will combine bith the script

 read choice
 case $choice in

 a)	/home/user/ps/add-record;;
 d)	/home/user/ps/delete-record;;
*)	echo Invalid choice - bye

esac
	

____________________________________________________________________________________________________________________________________________

S6E19

	==>use all online resources

	==>precise search

	==> 2nd opinion ==>listen advice

	==>Ask questions

	==>create documents and help others

===> linux exit status ==> in google

____________________________________________________________________________________________________________________________________________

S7E1

Important things to remember

root is like Admininstrator in windows

	==> root is admin 
	==> case sensitive system
	==>does not spaces in file system

____________________________________________________________________________________________________________________________________________

S7E2

Linux file types

=- =>Regular file
=d =>directory
=l =>link
=c =>device file
=s=>socket file
=p =>name pipe
=b=>block device

____________________________________________________________________________________________________________________________________________
