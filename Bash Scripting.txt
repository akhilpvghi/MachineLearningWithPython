Udemy - Bash Scripting for Beginners Learn to Script!

____________________________________________________________________________________________
S0E1

	==>introduction

	==>traffic monitoring


____________________________________________________________________________________________
S1E1

	utilities iused in this couse

	echo
		==>$echo hello world

	grep
		==>used to search for sring in file

		$ grep echo file_name

			==>searched for echo string in file

		$ grep echo

			==>will be searching string echo whatever you will be entering

		$ awk '{print $1,$3}' filename ==>will print first and third string in file

		$man cat ==>to get help

____________________________________________________________________________________________
S1E2

	script structure

	#!/bin/bash
	
	#this simple script echoes some text
	
	echo this is the first siimple text

	function second_simple_text()
	{
		echo this is second function
	}

	second_simple_text

	// function needed to be called after defining

____________________________________________________________________________________________
S1E3


variable and environments

	==>set  ==>to check all variables in environment

	==>by default it is a type of string

	#!/bin/bash

	A="This is variable A"
	B="This is variable B"

	echo $A
	echo $B

	chmod +x variables

===>only execution permission is needed once

	echo "this will expand: $B" ==>correct value of variable b will be printed

	echo 'This will NOT expand: $B' ==>single quotes does not print value

	or 

	echo "this will expand: $A. this will not expand: \$B"

========================

A="30"
B=4

C=$(($A + $B))

echo $C //34 ==>arithmetic evaluation

____________________________________________________________________________________________
S1E4


	script and function parameter

	echo $@ ==> we are expecting parameter when script runs

	echo $# ==>no of parameter we have received

	echo $1 ==>will print first parameter we have received

	echo $0 ==>will give script name

	shift ==>shift will shipt parameter while accessing except $0 parameter

	+===================

	function func_param() {
	
		echo func_param: $@
		echo func_param: $#


	}

func_param $1 $3 ==>now it doesnt matter how many parameter we re passing we are using only 1st and 3rd paramets 

____________________________________________________________________________________________
S1E5

ls -l >ls.output

		==>will put output of this to given file name

echo"this is a test file" > test_file ===>will be over written

inorder to append ==>use double sign " >>"

=================

grep "aug 15" < ls.output

or


grep "aug 15" ls.output ==>now here file is used as parameter

____________________________________________________________________________________________
S1E6

pipes

	==>output to one and input to second command

	ls -l | grep "aug 15"

		===>input used | by this command

	cat /proc/cpuinfo | grep "model name" | cut -d':' -f 2  ==>d is delimeter ==>f is representing which parameter to use



____________________________________________________________________________________________
S1E7

command susbstitution 

	==>emacs file.bash ==>like vi editor tool

	#!/bin/bash

	read A
	read B

	C=`expr $A + $B`

	echo $C
	
	echo "the result of $A + $B is `expr $A + $B`"

	OR

	echo "the result is $(($A +$B))"


			===>addition happened



____________________________________________________________________________________________
S1E8

if statements
	
	==>basic control case

	#!/bin/bash
	
	if[[ $# -ne 1]]
	then
		echo Wrong number of arguements. should be one.
		exit 2
	fi

		==>checks for only one parameter, no more than one parameter should be there

	if [ -e $1 ] ==>// OR if test -e $1
	then
		echo The file exists.
	else
		echo the file doen not exist
	fi

==========================

if [[ -e $1 && $1 -nt $0 ]]
then
echo the file exist and newer version
else
echo file doen not exist or new newer version
fi


____________________________________________________________________________________________
S1E9

case satements

	#!/bin/bash
	if [ $# -ne 1]
	then 
		echo I only know to greet exactly one person
		exit 2
	fi

	case $1 in
		Andrew)
			echo Hi there, $1
			echo How are you today?
			;;

		Newman)
			echo Hello, $1
			;;
		*)
			echo Nice to meet you
			;;
		esac

			==>//break is like automatically 


____________________________________________________________________________________________
S1E10

while until structure

	#!/bin/bash
	
	while [ "$REPLY" != YES]
	do
		echo Welcome to the meeting!
		echo Do tou agree with the same way I want to do things?

		read

		sleep 2
	done

=====
until ["$REPLY" == Yes ]   //===>kind of opposite way of while

____________________________________________________________________________________________
S1E11

for loop
	
	#!/vbin/bash

	for((i=1;i<10;i++))
	do
		echo -n "192.168.1.$i"	===>-n will allow next to print in same line
		if ping -W 1 -c 1 192.168.1.$1 > /dev/null
		then
			echo check!
		else
			echo no
		fi
	done



====================================================================================================

2nd form of for loop

	for i in 192.168.1.1 192.168.1.2 www.google.com 192.168.1.7
	do
		echo -n "$i "
		if ping -W 1 -c 1 $i > /dev/null
		then
			echo check!
		else
			echo no
		fi
	done

=================================================================================

rm -f my_example_file_*

for ((idx=0;idx<20;idx++))
do
	touch my_example_file_$idx
done

for myFilw in my_example_file_*
do
	echo "This is $myFile file" > $myFIle
done

=====>if we want to wrie only file number greater than 10

for myFIle in my_example_file_??
do
	echo "this is $myFIle file" > $myFile
done

	
____________________________________________________________________________________________
S2E1

#!/bin/bash

filename=
interface

function usage() {
	echo $0 -i interface -f filename
	exit 1
}

function extract_params() {
	if [ $# -ne 4]
	then
		usage
	fi

	while [$# -gt 1]
	do
		case $1 in
			-f)
				filename=$2
				;;
			-i)
				interface=$2
				;;
			*)
				usage
			esac
			shift
			shift
		done
}

extarct_params $@

echo interface $interface
echo filename $filename

____________________________________________________________________________________________
S2E2

..cont from S2E1

extract_params $@

DATE = `date + "%Y-%m-%d %H:%M"`

date_string = `cat /proc/net/dev | grep -w $interface | cut -f 2 -d':' | awk `{print $1,$2,$9,$10}``

if [-z "$data_string"]
then 
	echo interface $interface does not exist
fi

rx_bytes = echo $data_string | awk '{print $1}'`

rx_packets = echo $data_string | awk '{print $2}'`

if [! -e $filename]
then
	echo "data" > $filename
fi

____________________________________________________________________________________________
S2E3


cron tab

	==>in specific time

	==>cron daemon ==>prescheduled time

	
	#!/bin/bash

	date +"%Y-%m-%d %H:%M:%S" >> dates.txt

	===================

	emacs myCrontab

	# m h dom mon dow usercommand   ==>//min hour day_of_month  
	* * * * * /home/mortal/date_me.bash
	
	==>//given script must be executable

	$crontab myCronTab

	crontab -l ==>to check if its installed

	crontab -r ==>will remove crontab

	crontab -l ==>will be cleaned now

____________________________________________________________________________________________
S2E4

	 cron check interface



			....done

=====================================================================================================================================================================================

=====================================================================================================================================================================================


 ([Coursezone.net] Complete Linux Bash Shell Scripting Thru Real Life Examples)

by Imran Afzal
____________________________________________________________________________________________________________________________________________

S1E1

course syllabus overview

	==>Lab setup

		==>what is virtual machine

		==>linux installation

	section 2
		==>shell scripting

		==>interaction with kernel

		==>different shell

		==>starting a shell

	section 3(scripting standards)
		
		==>proper naming convention

		==> permissions

		==>shell script format

	setion 4
		==>basic shell scripts

	section 5

		==> Real life scripts


____________________________________________________________________________________________________________________________________________

S1E2

	==>to automate your task


____________________________________________________________________________________________________________________________________________

S2E1	

	lab setup
		
		what is virtual environment or machine..?

		==>what is Oracle virtual box ..?

		==>installing virtual box

		==>creating first virtual box  ...?

		==>linux installation

		==>CentOS


____________________________________________________________________________________________________________________________________________

S2E2

what is oracle virtual box..?

	==>centOS linux operating system

	==>it is open-source hypervisor for x86 computers

	hardware ==>OS ==>Oracle virtual Box ==> (linux , windows , mac)


____________________________________________________________________________________________________________________________________________

S2E3

	==>google type ==>oracle virtual box download

	==>go to download

	==>windows hst

	==>save the file

	==>leave everything default

	(109 mb exe it is)


____________________________________________________________________________________________________________________________________________

S2E4

	==>creating first virtual box

	==>like cntainer

	==>click on new

		==>name

		==>linux 64

		==>size of memory (ram)


____________________________________________________________________________________________________________________________________________

S2E5

install linux

	===>will do later


____________________________________________________________________________________________________________________________________________

S3E1

	shell scripting basics

	==>what is kernel ..?

	==>what is shell  ...?

	==>what is shell scripting?

	==>types of shells

	==> starting a shell

	==>how to run a shell script



____________________________________________________________________________________________________________________________________________

S3E2

	linux kernel

		==>interfaces between hardware and shofware


		==>OS == kernel + shell


____________________________________________________________________________________________________________________________________________

S3E3

what is shell?

	==>like container ==>contains information

	==>echo $0 ==>to find your shell

	==> cat /etc/shells ==>list all shell

	==>cat /etc/passwd



____________________________________________________________________________________________________________________________________________

S3E4

what is shell scripting ...?


	put instruction in a shell and run it

	like blowing air in shell

	

____________________________________________________________________________________________________________________________________________

S3E5

Types of shells

	==>Gnome

	==>KDE

	==>sh   (it is original by stephen born)

	==>bash (born again shell)
		==>more enhanced features

	==>csh and tcsh

		==>tcsh (doesn't run bash script)

	==>ksh (by David Korn)

		===>compatible with shell and bash


____________________________________________________________________________________________________________________________________________

S3E6

	start a shell

	==>simply type shell name

	==>echo $0  ==>(to check shell)

	==> view contents of home

		==>it is in gnome environment

	if you want to channge shell just give name

	$sh
	echo $0

	to exit ==>$exit


____________________________________________________________________________________________________________________________________________

S3E7

how to run a shell script

	==>absolute path or relative path

	~ => /home/user/dir/file_name

	when you are inside directory you have to specify that you to run it from here

	==> ./script_name

	==>only if you are giving script name


____________________________________________________________________________________________________________________________________________

S4E1

welcome to scripting standards

____________________________________________________________________________________________________________________________________________

S4E2

Script Naming conventions

____________________________________________________________________________________________________________________________________________

S4E3

Script File permissions

	chmod a+x ==>giving excuutable permission to all users

____________________________________________________________________________________________________________________________________________

S4E4

Script format

	==>first is define a shell

		==> #!/bin/bash
	
		==> # comments

		==>define variables (e.g name = Akhil)

		==>commands (echo, cp, grep etc.)

		==>statements (if, while, for etc.)

		==>vim is updated of vi

		==>but vi supports everywhere

			#!/bin/bash
			# Pupose: Testing script format
			# Date: 14/04/2021
			# Modification: 14/04/2021
			a='My name is AKhil'
			
			echo $a

____________________________________________________________________________________________________________________________________________

S4E5

Sequence of script execution

	==>top to bottom

			
____________________________________________________________________________________________________________________________________________

S5E1

	Basic shell scripting


____________________________________________________________________________________________________________________________________________

S5E2

create basic script

	you will only delete if dir is created by user not root otherwise only root can delete it

	vi bashfile  ==>we add bash extension if we want
	#!bin/bash
	# Author: AKhil
	# Date Created: 14/04/2021
	# Description : 
	# Date Modified: 

	echo Hello World

	$ls -ltr
	$chmod a+x bash_file
	$ /home/akhil/scripts/bash_file ==>with absolute

	$./bash_file ==>//absolute path

		echo
		echo Hello world
		echo

			==>to give like \new line



____________________________________________________________________________________________________________________________________________

S5E3

					
	Basic task script
	
		==>pwd
		ls
		whoami
		date
		cal
		touch a b c ==>create three file in same directory

	==>write script

		==>$vi basic_task
			#!/bin/bash
			# Author: Akhil
			# Date: 
			# Description:
			# Date Modified:

			echo 
			echo This Script will run basic tasks
			echo
			pwd
			ls
			whoami
			date
			cal
			touch a b c

			:wq!

			ls -ltr ==>the order in which they are created


____________________________________________________________________________________________________________________________________________

S5E4

Basic administrator task

	top
	df -h ==>when was the system reboot
	free -m
	uptime
	iostat

	>>>vi admintask
		#!/bin/bash
		#Author:
		#Date:
		#Description
		#Date modified:

		echo
		echo This script will run basic administrator commands
		echo
		top		==>will keep your session open and run in real time
		echo
		df -h
		echo
		uptime
		echo
		iostat
		echo
		echo end of script

		>>$chmod a+x admintask
		
	
		hence now

		top | head -10 ==>now it will pipe/give only 10 lines



____________________________________________________________________________________________________________________________________________
