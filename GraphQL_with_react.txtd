by S.Grider

___________________________________________________________
S1E1

-->Intro to GraphQL
-->why exist> , what is, how??

FAQs

blasamiq.com===>diagram tool
Atom==>code editor
Iterm with zshell ===>terminal


___________________________________________________________

S2E3

intro to Rest-ful Routing

===>user 23/post 25 ===>delete // and hence list may go long


___________________________________________________________
S2E4


really nested url====> :(

user===>and his friend ===>his friend information

nested url ===>is quite challenging



___________________________________________________________

S3E5


what is graphQL??

graph for query


query{

user(id="23"){

friends(){

compane {

name

}

}

}

}


___________________________________________________________


S3E06

technology that we need ---?

>>>terminal

>>> mkdir users
>>> cd users
>>> npm init
>>> npm install --save express express-graphql graphql lodash
>>>code . | atom .

users===>server.js==>

const express = require('express');

const app =express();

app.listen(port, ()=>{
console.log('listening')
});

___________________________________________________________

S3E7


registering with express and graphql

==>request to express===>and then response

but with graphql==>now request will be checked==>
==>is it either for GraphQl==>if yes,will be passed to GQL

====>otherwise express will send the response directly


-----===============

const expressGraphQL = require('express-graphql');  //expressGraphQL note alpha case ====>this is like glue of express and GQL

app.use('/graphql', expressGraphQL({
graphiql:true
}));


====>in same file server.js

>>>node server.js

localhost:port/graphql ===>in browser

//error schema


___________________________________________________________

S3E8

create schema folder===>in that schema.js


___________________________________________________________

S3E9

create schema folder===>in that schema.js


const graphql = require('graphql');
const {
	GraphQLObjectType,
	GraphQLSTring,
	GraphQLInt,
	GraphQLSchema
} = graphql;

const UserType = new GraphQLObjectType({
	name: 'User',
	fields: {
		id: { type: GraphQLString},
		firstName: { type: GraphQLString},
		age: { type: GraphQLInt }
	}
});

//define data type of property

___________________________________________________________

S3E10

root query is needed for GraphQL===>entry point

cost _ = require('lodash');

const userData = [
{id : '23', firstName: 'Akhil', age: 23},
{id : '47', firstName: 'Akhil kum', age: 23}
]

const RootQuery =new GraphQLObjectType({
	name: 'RootQueryType',
	fields: {
		type: UserType,
		args: { id: { type: GraphQLString }}  //give me id and i will give you type of UserType 
		resolve(parentValue, args) {
			return	_.find(userData,{id: args.id})
		}
	}
})



module.exports = new GraphQLSchema({
	query: RootQuery
});
___________________________________________________________

S3E11

creating new schema===>in above file

	
import it in server.js

const schema = require('./schema/schema')



app.use('/graphql', expressGraphQL({
schema,
graphiql:true
}));


=====================
node server.js

and we will ge graph ql screen

___________________________________________________________

S3E12

this is tool provided by graphQl==>

{
user(id: "23") {
id,
firstName,
age
}
}
==>press play and we will get result

we are returning plain js object from above code // GQL is mapping it self

___________________________________________________________

S3E13

so far we had been using hardcoded data

dummy db api create===> type in google>>> github typicode json-server

npm i --save json-server

create >>>db.json 

{
"uesrs": [
{"id": "23", "firstName": "Bill", "age":23},
{"id": "47", "firstName": "Alex", "age":29}
]
}

===========================
in  package.json

"scripts":{

"json:server": "json-server --watch db.json"
}

=================================
>>npm run json:server

___________________________________________________________

S3E14

const axios = require('axios');

resolve(parentValue, args){
	return axios.get(`http://localhost:3000/user/${args.id}`)
		.then(resp =>resp.data);
}

//we will return as asynch data
//we can remove hard coded data
===>npm i --save axios

//as axios append data in data key

___________________________________________________________

S3E15

nodemon===>observe file and restart the server

npm i --save nodemon

in package.json
>>
"scripts": {
"dev": "nodemon server.js"
}

>>>npm run dev

___________________________________________________________

S3E16

new schema added in db.json

___________________________________________________________

S4E17

const CompanyType = new GraphQLObjectType({

name: 'Company',
field: {
id: {type: GraphQlString},
name: {type: GraphQlString},
description: {type: GraphQlString}
}


}); //order of definition is mandatory companyType should be written above UserType

// link association type

in const UserType

add one more field in Fields {}==>

const UserType = new gqlObject..
company: {
type: CompanyType,


}


___________________________________________________________

S4E18

aassociation between two schemas..?


to map company in userType with id only for GQL

const UserType = new gqlObject..
company: {
type: CompanyType,
resolve(parentValue, args){
	console.log(parentValue, args);
	return axios.get(`http://localhost:3000/companies/${parentValue.companyId}`)
		.then(res=>res.data)
}

}

___________________________________________________________

S4E19

process going on...explanation==>

resolve let us to some other node in graph===>

___________________________________________________________

S4E20

we can not get company detail directly==>

to solve===>

in RootQueryType

alsong with fields

,
company: {

type: CompanyType,
args: {id: { type: GraphQlString}}
resolve(parentValue, args)
}

//and hence now we can retrieve data from company directly

___________________________________________________________

S4E21

now we will get multiple users from company===>

i.e bidrectional relations

___________________________________________________________

S4E22

in CompanyType ===>

in fields:{


users: {
	type: new GraphQLList(UserType) //import GraphQLList
	// no need to pass anything
	resolve(parentValue, args) {
	return axios.get(`http://localhost:3000/cpmpanies/${parentvalue.id}/users`)
		.then(res =>res.data)
	}
}

}

we are getting error UserType is not defined
+++++++++++++++++++++++++++++++++++++++++++++++
___________________________________________________________

S4E23

resolving circular dependencies

we can not change the order===>

=====

what we can do is==>

create fields () arrow function to handle the closure property

fields : ()=>{
all the properties inside it
}

___________________________________________________________

S4E24

Query Fragments

query findCompany {

company(id: "1"){
id
name
description

}
} ===========>naming query in graphiql


we can not retrieve same query again===>in tha case we need to assign to another arbitrary key==>as json response can not have same key response

{
apple: company(id: "1"){}
google: company(id: "2"){}

}



===============>to use same structure inside query
assign it to fragment like in graphIql

fragment companyDetails on Company {
id
name
description
}

==============>we will get error if key doesnt match in key type

// now
{
apple: company(id: "1"){
...companyDetails
}
google: company(id: "2"){
...companyDetails
}

}

___________________________________________________________

S4E25

mutation in GraphQL===>update,delete,add records...

    		gQL
		/ \
	       /   \
	      /     \
	Root Query   Mutation

===============================

const mutation = new GraphQLObjectType({
	name: 'Muatation',
	fields: {
		addUser: {
		type: UserType,
		args: {
			firstName: { type: GraphQLString },
			age: { type: GraphQLInt },
			companyId: { type: GraphQLString },
			},
		resolve() {
		
			} 
		}
	}

});

// just abovemodule.export

___________________________________________________________

S4E26

every mutation must have same name===>we created ==>addUSer 

firstName: {type: new GraphQLNonNull(GraphQLString) }==>now mandatory now

		resolve(parentValue,{ firstName, age }) {
			return axios.post('http://localhost:300', {
				firstName,
				age
				}).then((res)=>res.data)
			} 



// !mark on graphIql schema is indicicating that it is mandatory field

// in graphIQL

muation {
	addUser(firstName: "akhil", age:26)
	id
	firstName
	age

}

___________________________________________________________

S4E27

delete mutation

all mutaion will be inside fields

deleteUser: {
	type: UserType,   // what we want in return
	args: {
	id: { type: new GrpahQLNonNull(GraphQLString)}
	}	
resolve(parentValue, {id}){
	
	return axios.delete(`url/${id}`)
	.then(res => res.data);
	}

}


// but json server does not tell what is deleted==>in this case only


___________________________________________________________

S4E28

put and patch request===>if there is something--
>overwrite all

patch request==>completly replace==>only add extra fields 


fields :{
	{
	.
	.
	.
	},
		editUser: {
		type: UserType,
		args: { id : { type: new GrphQLNonNull(GraphQlString) }
			firstName : { type: GraphQLString }, // not mandatory to update	
			age : { type: GraphQLInt},
			companyId : { type: GraphQLString },		
			
resolve(parentValue, args){   // will not update id as it is already there
	return axios.patch(`url`, args)
	.then((res)=>res.data)   
	}
		}


}


/// in graphIql

mutation {
	editUser(id:"40", age: 10){
	id
firstName
age
company
}
}

___________________________________________________________

S5E29

client with Js==>Lokka==>abililty to make request GQL backend==>caching

apollo client===>full stack uses of GQL==>by same guy who created meteorJS

Relay ===>use by fb, complex==>amazing performance on mobile

___________________________________________________________

S5E30

graphQL Express v/s Apollo server

in apollo server==>difeerent schema and then relate them seperately

___________________________________________________________

S6E31

front-end==>

github.com/stephengrider/lyrical-graphql 

get backend===>that we have already been through...

git clone above_url ===>

cd====>

___________________________________________________________

S6E32

architecture intro....

if(!url)
thrown new Error("message")

___________________________________________________________

S6E33

mongoLab setup...to avoid local setup

mlab.com===>signup==>valid email==>address

login===>create new database

Amazon US-east==>is free==>

single-node===>sandbox is free==>

database name===>put in here

then click on create new database

====>

and get MongoDb URI

====>go to user==>add Database user===>

enter username and password===>

====>then go back to code===>server.js===>

paste===> mongoDb URI==>change userName and password===>

====================>

cmd==>npm run dev

___________________________________________________________

S6E34

we can use automated document feature of graphiQL

it contains mutation===>which includes data specific...

===>

mutation  {
	addSong(title: "Cold Night"){
	id
	}
}

====>we will get generated id....>

mutation {
	addLyricToSong(songId: "xxxxxx", content: "lyrics..."){
	id
	}
}
=====>we will again get Id

=========================================================

{
song {
id
title
lyrics {
content
}
}
}
====>we will get above details

___________________________________________________________

S6E35

Apoolo store====>talks with graphiQL===>reside at client side


react app will be in APollo provider===>

in index.js of react===>

impory ApolloClient from 'react-apollo';
import { APolloProvider } from 'react-apollo';


const client = new ApolloClient({}); ===>assumes /graphiql is present


return (

	<ApooloProvider client={client}>    ===>glue layer for react and graphiQL
	<div>Lyrical</div>
	</ApooloProvider>
)

=====> // we are not using relay as it need more configuration as compare to apollo

___________________________________________________________

S6E36

in new component folder(create) in client folder===>

import React, { Component } from  'react';

class SongList  extends Component {

	render(){
	return(
	<div>akhil</div>
	);
	}

}
===================

import above component in index.js

___________________________________________________________

S6E37

GQL query in react component

strategy to work with both==>

1. Identify data required by component
2. Write Quert in GraphiQl (for practice) and in compnent file
3.Bond query + component
4. Access Data!


========================> 

{
songs {
title
}
}
===>we will get required data

================================>

queries are not javascript code....imp

so 

import gql from 'graphql-tag'; // in component

const query = gql` 
{
songs {
	title
}
}
`;


___________________________________________________________

S6E38

bond query + component

import { graphql } from 'react-apollo'; // in component


export default graphql(query)(SongList); // export will be changed now like this===>steps now====>component rendered ===>query issued==>query complete===> Rerender component now==>

// data will be now in props==>


console.log(this.props) // and you'll get data

___________________________________________________________

S7E39

data will be recieved in props==>

this.props.data.songs===>

before fetching ====>chechk loading flag!!

___________________________________________________________

S7E40

fixing key warning===>

<li key={song.id}> {song.title} </li>

___________________________________________________________

S7E41

Architecture===>of application==>

___________________________________________________________

S7E42

import { Router, Route, hashHistory, IndexRoute} from 'react-router';

<ApooloProvider client={client}>
	<Router history={hashHistory} >
		<Route path="/" component={App}>
			<IndexRoute component={SongList} /> //===>songlist component will be props as props .children to App
		</Route>
	</Router>
</ApolloProvider>

___________________________________________________________

S7E43

whenever we need to update data we call it as mutation in GraphiQl

songCreate.js ===>in component folder

===================

import React, {Component} from  'react';

<div>
	<form>
	<label>SOng Title:</label>
	<input 
	onChane={event => this.setState({title: event.target.value})}
	value={this.state.value}

	/>
	</form>
</div>
===============================

<Router history={hashHistory} >
		<Route path="/" component={App}>
			<IndexRoute component={SongList} /> //===>songlist component will be props as props .children to App
			<Route path="song/new" component={SongCreate} />
		</Route>
	</Router>

___________________________________________________________

S8E44

import gql from 'graphql-tag';

onSubmit(event) {
	event.preventDefault(); // to prevent default of form submission
	
}

<form onSubmit={this.onSubmit.bind(this)}>

const mutation = gql`
mutation {
	addSong(title: )  // react component data to graphql mutation query which is outside of class componet??
}
`;


///in graphiql==>

mutation {
	addSong(title: "DOg Call"){
		id
		title
	}
}

___________________________________________________________

S8E45

Query params with variables

mutation AddSong($title: String){
	addSong(title: $title){
		id
		title
	}
}
======>
in query variable we do not use "$" sign


___________________________________________________________

S8E46

//now name mutation 

import { graphql } from 'react-apollo';

onSubmit(event){

this.props.mutate({
variables: {
	title: this.state.title
}
})
}

const mutation = gql`
	mutation AddSong($title: String){
		addSong(title: $title)
		title
	}

`;


export default graphql(mutation)(SongCreate);

___________________________________________________________

S8E47

import { Link } from 'react-router';


<Link
to="/song/new"
className="btn=-floating btn-large red right"
>
<i className="material-icons">add</i>

</Link>


=======
import {hashHistory } from 'react-router';

// mutate returns  promise

this.props.mutate({})
.then(()=> hashHistory.push('/'))
.catch(()=>)

______________________________________________________________________________________

S8E48

appolo doesn'y fetch again if data is already there

______________________________________________________________________________________

S8E49

refetch list after mutating

this.props.mutate({
variables: {.....}
refetchQueries: [{}]  //same query gql one
}).then(()=>{})

//lets create another folder queries==>along with component

==>queries.fetchSong.js

import gql from 'graphql-tag';

export default gql`
{
songs{
	id
	title
	}
}
`
======================

//now replace this query in compoent/SOngList.js

import query from '../queries/fetchSong';

//replace 

const query= .....;

//no need to modify as we imported as query only

///now add refetchQueries: [{ query: query, variables: }] // variables are same that we paas
//in graphIql gui


refetchQueries: [{ query: query}] // variable is optional, as in this case we do not have any thing to pass
			// key value are same==>you know what to do


______________________________________________________________________________________

S8E50

// delete song

//use name mutation if you want to pass variable

_____________________________________________________________________________________

S8E51

in SongList.js

const mutation = gql`
mutation DEleteSOng($id: ID){
	deleteSong(id: $id){
		id
	}
}

export default graphql(query)(SOngList):

//but only one query/mutation at a time :(

// so now

export default graphql(mutation)(
	graphql(query)(SongList)
);
`
_____________________________________________________________________________________

S8E52

// call mutation

onSongDelete(id) {
	this.props.mutate({variable: {id}});
}


_____________________________________________________________________________________

S9E53

refetch on same page==>

another method other than prevevios 

this.props.mutate({ variables: { id }})
	.then(()=> this.props.data.refetch());

	// this above approach is better whwnever we want to update in same component use this approach only


_____________________________________________________________________________________

S9E54

css..

_____________________________________________________________________________________

S9E55

create song detail component

components/SongDetail.js

import React, { Component } from 'react';

class SongDetail extends Component {
	render() {
		return (
		<div>
		<h3>SOng Detail</h3>
		</div>
		)
	
	}
} 

_____________________________________________________________________________________

S9E56

songDetail

query SongQuery($id: ID!){
song(id: $id){
	id 
	title
	}
}

========================

import gql from 'graphql-tag';

export default gql `
query SongQuery($id: ID!){
song(id: $id){
id 
title
}
}
`;
_____________________________________________________________________________________

S10E57

import { graphql } from 'react-apollo'; // sandwith b/w graphql and react
import fetchSong from '../queries/fetchSong'; 


export default graphql(fetchSong, {
options: (props) => { return {variables: { id: props.params.id } } }
})(songDetail); //but where to send id??? so add new object along with fetchsong

_____________________________________________________________________________________

S10E58

render () {
	const { song } = this.props.data;

	if(!song) { // can also use loading flag given by gql
		return <div>Loading</div>

	}

	return (
	<div>
		<h3>{song.title}</h3>
	</div>
	)

}


_____________________________________________________________________________________

S10E59

SongDetail.js

import { Link } from 'react-router';


<Link to="/">Back<Link>

//SongList.js

<Link to={`/songs/${id}`}>{title}</Link>



_____________________________________________________________________________________

S10E60

//Lyric creation form

LyricCreate.js

//form creation


_____________________________________________________________________________________

S10E61

//create lyric mutation and class component


const addLyric = gql`
	mutation AddLyricToSong($content: String, $songId: ID){ // mutation name can be anything
	addLyricToSong(content: $content, songId: $songId)
	
}

`


_____________________________________________________________________________________

S10E62














++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

New Section
________________________________________________________________________________________________________________________________

GraphQL with python and react

S1E1

install python

python.org/downloads

install nodejs.org==>long term support(LTS)

yarnpkg.com/en/

cloudinary.com ===>to upload free

__________________________________________________________________

E2

graphql ===>is query language

graphql.org/swapi-graphql/?

===>we get only that data , that we asked for

__________________________________________________________________

E3

{
	allFilms {
	films {
		title
		}
	}
}

===>format e.g of graphQL query

====>query structure can be seen in root query

__________________________________________________________________

E4

to change data==> we use concept called mutation ===>like manipulate

bnames.herokuapp.com/graphql===>

====>

muatation {
	createBaby(babyInfo: {
		name: "Fred",
		votes: 1
	}) {
		name
		votes
	} //it is return type if it resolves successfully

}

__________________________________________________________________

E5

mutation with variables===>

//String! ===>! indicates required 

mutation ($name: String! , $votes: Int!) {
	createBaby(babyInfo: {
	name: $name,
	votes: $votes
	})
}


====>graphQL Ide
has query variable field

{
"name": "James",
"votes":0
}
 
__________________________________________________________________

E6

graphene is conjunction b/w graphql and python

>>>pipenv shell // is like npm install for python only difference is that we can enter/exit in this mode

>>>exit // can exit

>>>pipenv install graphene

===============
in schema.py

import graphene
import json

class Query(graphene.ObjType):
	hello = graphene.String()
	
	def resolve_hello(self, info):
		return "world"

schema = graphene.Schema(query= Query)

result = schema.execute(
	'''
	{
	hello
	}
	'''

)

print(result.data.items())
#or
print(result.data['hello'])
#or
dictresult = dict(result.data.items())
print(json.dumps(dictResult, indent=2) # indent is optional


__________________________________________________________________

E7

another query

#in class only from above

is_admin = graphene.Boolean()

#name of resolver must be prepended with resolve

def resolve_is_admin(self, info):
	return True

result = schema.execute(
	'''
	{
	is_admin   # will give an error as it should be changed as isAdmin and no longer snakeCase iif you want to change this behavious you could add auto_camelcase = False , in graphene.schema as one of the parameter

	}
	'''

)


__________________________________________________________________

E8

from datetime import datetime

uptill now single value and single result

lets create another class subclassed from graphene.ObjectType

class User(graphene.ObjectType):
	id = graphene.ID()
	username = graphene.String()
	created_at = graphene.DateTime()

class Query(graphene.ObjectType): # root query type
	users =  graphene.List(User, limit= graphene.Int()) # limit is optional parameter to limit the result 
	hello = graphene.String()
	is_admin = graphene.Boolean()

# make resolver for it

def reslove_users(self, info,limit=None): #limit=None make it optional
return [
user(id="1",username="akhil",created_at= datetime.now())
][:limit]

#execute 

'''
{
users   
}
'''

# and you will get an error give internal filds too.
	# like { users(limit: 1) { id # if limit is used
	# username
	#createdAt
	#}
	#}

	only then you will get result

__________________________________________________________________

E9

add new user

#to get unique string

import uuid

#in Usr class can set as default value

like

id = graphene.ID(default_value = str(uuis.uuid4()))

# now we can remove hardcoded data of id in mutate fn
 
class CreateUser(graphene.Mutation):
	user = graphene.Field(User)

	class Arguements:
	 	username = graphene.String()

	def mutate(self,info, username):
		user = User(id="3", username=usrname,
		created_at=datetime.now())
		return CreateUser(user=user)

class Mutation(graphene.ObjectType):
	create_user = CreateUser.Field()

# execute

'''
mutation {
createUser(username:"akhil"){

user{
id
username
createdAt 
}
}
}
'''


__________________________________________________________________

E10

passing dynamic values in mutation

'''
mutation ($username: String){
createUser(username: $username)
	user{
	id
	username
	createdAt
	}
}
''',
variable_values={'username': 'Dave'}

=============================

'''
query getUsersQuery ($limit: Int!){
	users(limit:){
	id
	username
	createdAT
	}
}
''',

variable_values={'limit':1}


__________________________________________________________________

E11

self and info

// suppose user want to write blogs

class Post(graphene.ObjectType):
	

class CraetePost(graphene.Mutation):
	post = graphene.Field(Post)
	
	class Arguements:
		title +graphene.String()
		content = graphene.STring()
	def mutate(self, info, title, content)
		print(info.context.get('is_anonymous'))
		if info.context.get('is_anonymous')
			raise Exception('Not Authenticated')
		post = Post(title=title,content=content)
		return CreatePost(post=post)

class Mutation(graphene.ObjectType):
	create_post = CreatePost.Field()

///////
'''
mutation {
	craetePost(title="hello", content="world"){
	post {
		title
		content
		}
	}
}
'''
///not secure till now anyone can post

so add context
'''
.
.
.
and so on
''',
context={'is_anonymous': True}

====================================

self===>can be used to create new field depending on existing fields

avatar_url = graphene.String()

def resolver_avatar_url(self, info):
	return 'https://abc.com/{}/{}'.format(self.username, self.id)


// now we can ask for avatar_url in query

__________________________________________________________________

E12

creating base Django

->react-tracks
>>>pipenv shell

>>>pipenv install django graphene-django django-graphql-jwt django-cors-headers

//formatter tool

>>>pipenv install --dev autopep8

// in env mode
>>>django-admin startproject app

>>>python manage.py migrate
/// and you'll get devlopment type db

>>>python manage.py runserver 
/// to run python server

__________________________________________________________________

E13

-->app

python manage.py startapp tracks

/// determine track data

in models.py under migrtation under ttracks

from django.db import models

class Track(models.Model):
	#id field will be added automatically
	title = models.CharField(max_length=50)
	description = models.textField(blank=True) # blank=True to make it optional
	url = models.URLField()
	created_at = models.DateTimeField(auto_now_add=True)

# now activate this model
by adding 
'tracks' in INSTALLED_APP array which is in settings.py which is in app folder

//
python manage.py makemigrations # this will help us to make sql queries

>>> python manage.py migrate 


__________________________________________________________________

S4E14

in app folder
>>>python manage.py shell

>>>from tracks.models import Track
>>>Track.object.create(title="Track1", description="Track 1 Description", url="https:track1")
// above will create data in our database
>>>exit()

===>app==>setting.py

// ADD GRAPHENE
INSTALLED_APPS = [
.
.
.
'graphene_django',
.
]

GRAPHENE = {
'SCHEMA': 'app.schema.schema'
}

=====================

in track folder create schema.py
//in schema.py

import graphene
from graphene_django import DjangoObjectType
from .models import Track

class TrackType(DjangoObjectType)
	class Meta:
		model = Track

class Query(graphene.ObjectType):
	tracks = graphene.List(TrackType)

	def resolve_tracks(self, info):
		return Track.Object.all()

====================================
in app folder create schema.py

import graphene
import tracks.schema

class Query(tracks.schema.Query,graphene.ObjectType):
	pass

schema = graphene.schema(query=Query)

__________________________________________________________________

S4E15

...cont

setup graphiql as we donot want to execute here

in app go to urls.py

//add following code

from graphene_django.views import GraphQLView
from django.views.decorators.csrf import csrf_exempt

urlpatterns = [
//add another path

path('graphql/', csrf_exempt(GraphQLView.as_view(graphiql=True))) //csrf_exempt will remove errors like cors origin

]

///

>>>python manage.py runserver
localhost:8000/graphql==>we should get graphiql interface

__________________________________________________________________

S4E16

in tracks/schema.py

create one more class

class CreateTrack(graphene.Mutation):
	track = graphene.Field(TrackType)

	class Arguements:
		title = graphen.String()
		description = graphen.String()
		url = graphen.String()

	def mutate(self, info, title,description,url): //or **kwargs in place of three param
		Track(titletitle,description=description,url=url)
		track.save()
		return CreateTrack(track=track)

class Mutation(graphene.ObjectType):
	create_track = CreateTrack.Field()

/// app/scema.py

class Mutation(tracks.schema.Mutation, graphene.ObjectType ):
	pass

schema = graphene.Schema(query=Query,mutation=Mutation) // add mutation in schema

//we will find our mutation in graphiql


__________________________________________________________________

S4E17

//creating a user

create user folder along with track folder===>in that create add schema.py

from django.contrib.auth import get_user_model
import graphene
from graphene_django import DjangoObjectType

class UserType(DjangoObjectType):
	class Meta:
		model = get_user_model()

class CreateUser(graphene.Mutation):
	user = graphene.Field(UserType)

	class Arguements:
		username = graphene.String(required=True)
		password = graphene.String(required=True)
		email = graphene.String(required=True)

	def mutate(self, info, username, password, email):
		user = get_user_model()(
		username =username,
		email =email
		)	
		user.set_password(password)
		user.save()
		return CraeteUser(user=user) //if return stamt is not there you will get null

class Mutation(graphene.ObjectType):
	create_user = CreateUser.Field()

====>in app/schema.py

//update Mutation class

import user.scema

class Muatation(users.schema.Mutation) // along with track schema mutation

//note this django default user model so there may multiple extra fields
// and hence we can exclude them by
changing to user/schema.py

class Meta:

only_fields = ('id','email', 'password', 'username')



__________________________________________________________________

S4E18

//querying user by id

in user/schema.py

class Query(graphene.ObjectType):
	user = graphene.Field(UserType, id=graphene.Int)
	(required=True)

	def resolve_user(self info, id):
		return get_user_model().objects.get
		(id=id)

//now enable this query in app/schema.py

class Query(users.schema.query, graphene.ObjectType):
	pass
__________________________________________________________________

S4E19

//authentication with the help of JWT (json web token)

 //app/settings.py

 MIDDLEWAR = [
 ...
//GIVEN IN GIT 
 ... 
 ]

AND EDIT SOME MORE LIST


__________________________________________________________________

S4E20

//how to use header?? in graphql

//insomnia.rest

// download //it is like postman

select graphql query===>it will always be post call in graphQL

===?http://localhost:8000/graphql/ ===>//always ends with slask

we can pass auth in graphQL now and can check from insomnia

__________________________________________________________________

S4E21

now connect track by user

in track/model.py

add one more field in 

class Track():
	.
	.
	.
	posted_by = models.ForeignKey(get_user_model(), null=True, on_delete=models.CASCADE) //null is needed in django2 that we are using


///

>>>python manage.py makemigrations
>>>python manage.py migrate

///update create Track mutation

////===>track/schema.py
def mutate(.....>):
	user = info.context.user

	if user.is_anonymous:
		raise Exception('Log in to add a track')
	track = Track(...,posted_by=user)

>>>python manage.py runserver

__________________________________________________________________

S4E22

//update tracks to delete and update

track/schema.py

class UpdateTrack(graphene.Mutation):
	track = graphene.Field(TrackType)

	class Arguements:
		track_id = graphene.Int(required=True)
		title = graphene.String()
		description = graphene.String()
		url = graphene.String()

	def mutate(self, info, track_id, title, url, description):
		user = info.context.user
		track = Track.objects.get(id=track_id)

		if track.posted_by != user:
			raise Exception('Not permitted to update this track')

		track.title = title
		track.description = description
		track.url = url


		track.save()
		return UpdateTrack(track=track)

//register this new mutation

class Mutation(graphene.ObjectType):
	....
	update_track = UpdateTrack.Field()

__________________________________________________________________

S4E23

// delete tracks

tracks/schema.py

class DeleteTrack(graphene.Mutation):
	track_id= graphene.Int()

	class Arguements:
		track_id = graphene.Int(required=True)

	def mutate(self, info, track_id):
		user = info.context.user
		track = Track.objects.get(id=track_id)

		if track.posted_by != user:
			raise Exception('Not permeted')

		track.delete()

		return DeleteTrack( track_id = track_id)


//update mutation fiels

class Mutation(graphene.ObjectType):
	...
	...
	delete_track = DeleteTrack.Field()

// check in graphiql

__________________________________________________________________

S4E24

//like tracks (record likes)
in migrations/models.py

class Like(models.Model):
	user = models.ForeignKey(get_user_model(), null=True,
	on_delete = models.CASCADE)
	track = models.ForeignKey('tracks.Track', related_name = 'likes', on_delete=modles.CASCADE)

>>>python manage.py makemigrations
>>>python manage.py migrate

>>>python manage.py runserver

//migrations/schema.py

from models import Track, Like
from users.schema import UserType


class CreateLike(graphene.Mutation):
	user = graphene.Field(UserType)
	track = graphone.Field(TrackType)

	class Arguements:
		track_id = graphene.Int(required =true)
	
	def mutate(self ,info, track_id)
		user =info.contexxt.user
		if user.is_anonymous:
			raise Excepption('login to like tracks')

		tracks = Track.objects.get(id=track_id)
		if not track:
			raise Exception('cannot find tracks with given id')

		Like.objects.create(
			user=user,
			track=track
		)
		
		return CreateLike(user=user, track=tarck)

// add in oour base mutation class

class Mutation(graphene.ObjectType):
	,,,,
	...
	...
	create_like = CreateLike.Field()  


__________________________________________________________________

S4E25

// we will be querying for likes

class LikeType(DjangoObjectType):
	class MetaL
	model =Like

class Query(...)
	...
	likes = graphene.List(LikeType)

	def resolve_likes(self, info):
		return Like.object.all()
	

__________________________________________________________________

S4E26

graphiql error handling==>

from graphql import GraphQLError

raise GraphQlError('message') ===>in place of exception

// check in graphiQL == and it will be same


__________________________________________________________________

S4E27

// provide search facility

tracks/schema.py
class Query(...):

	tracks = graphene.List(...,search=graphene.string())
	.
	.
	.

	def resolve_tracks(...,search=None):
		if search:
			return Tracks.objects.filter(title__startswith=search)

now check in graphiql==>

{
tracks(search: "Tr"){
	title
}
}

===>will give all result as every track start with TR only

//title__exact ==>
//title__iexact ==>not case sensitive
//title__contains ==>case sensitive
//title__icontains ==>case insesitive

from django.db.models import Q //q allows more complex query

// q can turn filter to object and then we 


//now we can use logical operators

if search:
	filter =(
		Q(title__icontains=search) | 
		Q(descriptional__icontains = search) |
		Q(url__icontains = search) |
		Q(posted_by__username__icontains =  search)
	)
	return Track.objects.filter(filter)
 
 // | is or operator

__________________________________________________________________

S5E28

//react-project

 apoolo client library is  go to tool for react and graphql


//clone github.com/readbarger/react-tracks-client

///npm start ==>in required directory


__________________________________________________________________

S5E29

material in built


__________________________________________________________________

S5E30

import { ApolloProvider } from 'react-apollo'
import ApolloCLient from 'apollo-boost';

const client = new ApolloCloient({
	uri: "http://localhost:8000/graphql/"
});

ReactDOm.render(
	<ApolooProvider client={client}>
		<Root />
	</ApolloProvider>
	document.getElementById("root")

)

// root.js

import { query }from 'react-apollo';


<Query query={GET_TRACKS-QUERY}>
 {({ date, loading, error }) => {
	if(loading) return <div>Loading</div>
	if(error) return <div>Error</div>
 
	return <div>{JSON.stringinfy(data)}</div>
 }}
</Query>

const GET_TRACKS-QUERY = gql`
{
	tracks {
	id
	title
	description
	url
	}
}
`
__________________________________________________________________

S5E31

>>>pipeenv shell 
>>>python manage.py runserver // must be in virtual env now run it in app folder

//enable cors==> in django header // searrch for it and add require in INSTALLED_APPS
	//also in middle ware sequence does matter

//add

CORS_ORIGIN_WHITELIST = (
	'localhost:3000'
)

__________________________________________________________________

S5E32

//create our register form

main index.js
import Auth from "./Root";

<Auth /> ==>in place of Root


/auth/index.js

import Login ...
import Register ...
import { Mutation } from 'react-apoloo';
import { gql } from 'apollo-boost';
//Register.js

return (
<div className={classes.root}>
<Paper..
<avatar>
</avatar>
<Mutation>
{()=>{

return(
<form >
</form >
)

}}
</Mutation>
<paper>

</div>
)


// above is using material classes


__________________________________________________________________

S5E33

apollo developer tool

mutation($username: String!){
createUser(username: $username){
	user {
		username
		email
	}
}
}
_______________

in qury variables 
=========
{
"username": "Fred",
...// if any other
}



__________________________________________________________________

S5E34

<Mutation muatation={REGISTER_MUTATION}>

{ () => {
	return ()

}}
	

const REGISTER_MUTATION = gql`

`;

__________________________________________________________________

S5E35









